##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   10/Sep/2015  19:03:29 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  near                                              #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\lily #
#                          \15BC178B_Lily_AX1070_20150908\15BC178B_Lily_AX10 #
#                          70_20150908\task\task_fm.c                        #
#    Command line       =  -I "C:\Program Files\IAR Systems\Embedded         #
#                          Workbench 4.05 Evaluation version\8051\INC\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench  #
#                          4.05 Evaluation version\8051\INC\CLIB\" -I        #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\lil #
#                          y\15BC178B_Lily_AX1070_20150908\15BC178B_Lily_AX1 #
#                          070_20150908\COMMON\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\INC\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily #
#                          _AX1070_20150908\config\" -I "C:\Documents and    #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\api\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily #
#                          _AX1070_20150908\fm\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\fat\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily #
#                          _AX1070_20150908\display\" -I "C:\Documents and   #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\displ #
#                          ay\led\" -I "C:\Documents and                     #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\displ #
#                          ay\lcd\" -I "C:\Documents and                     #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\task\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lil #
#                          y_AX1070_20150908\user\" -I "C:\Documents and     #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\mem\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily #
#                          _AX1070_20150908\module\" -I "C:\Documents and    #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\modul #
#                          e\kedir\" -I "C:\Documents and                    #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\key\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily #
#                          _AX1070_20150908\startmusic\" -D UART_DEBUG -D    #
#                          AX207X_TAG -lC "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\UART_ #
#                          Debug\List\" -o "C:\Documents and                 #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\UART_ #
#                          Debug\Obj\" -e -z9 --debug --core=plain           #
#                          --dptr=16,1 --data_model=large --code_model=near  #
#                          --calling_convention=ext_stack_reentrant          #
#                          --place_constants=code --nr_virtual_regs 20       #
#                          --extended_stack "C:\Documents and                #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\task\ #
#                          task_fm.c"                                        #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\lily #
#                          \15BC178B_Lily_AX1070_20150908\15BC178B_Lily_AX10 #
#                          70_20150908\UART_Debug\List\task_fm.lst           #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\lily #
#                          \15BC178B_Lily_AX1070_20150908\15BC178B_Lily_AX10 #
#                          70_20150908\UART_Debug\Obj\task_fm.r51            #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily_AX1070_20150908\task\task_fm.c
      1          /*****************************************************************************
      2           * Module    : Task
      3           * File      : task_fm.c
      4           * Author    : Hanny
      5           * Email     : coldney@yahoo.com.cn
      6           * Function  : ÊÕÒô»úÈÎÎñÁ÷³Ì
      7           *****************************************************************************/
      8          #include "include.h"
      9          #include "fm_fade.h"
     10          
     11          #if TASK_FM_EN
     12          
     13          IAR_XDATA_A type_fm_ctl fm_ctl;
     14          
     15          
     16          //¸ù¾ÝchÆµµÀ»ñÈ¡FMÆµµã
     17          #pragma location="TASK_FM_SEG"
     18          static void fm_get_freq(void)
     19          {
     20          	select_irom2();
     21          	fm_ctl.fm_freq = fm_get_diff(fm_ctl.ch_cur, fm_ctl.ch_buf, CH_BUF_MAX);
     22          	restore_mem();
     23          
     24          #if FM_SEEK_50K_STEP
     25          	if(fm_ctl.fm_freq <= ((FM_MAX_FREQ - FM_MIN_FREQ)/5))
     26          	{
     27          		fm_ctl.fm_freq = fm_ctl.fm_freq*5+FM_MIN_FREQ;
     28          #else
     29          	if(fm_ctl.fm_freq <= (FM_MAX_FREQ - FM_MIN_FREQ))
     30          	{
     31          		fm_ctl.fm_freq += FM_MIN_FREQ;
     32          #endif
     33          	}
     34          	else
     35          	{
     36          		fm_ctl.ch_total = 1;
     37          		fm_ctl.ch_cur = 1;
     38          		fm_ctl.ch_buf[0] = 0x01;
     39          		fm_ctl.fm_freq = FM_MIN_FREQ;
     40          	}
     41          }
     42          
     43          
     44          //FMÈÎÎñ³õÊ¼»¯
     45          #pragma location="TASK_FM_SEG"
     46          static void task_fm_enter(void)
     47          {
     48          	if(b_sys.modeswitch_flag)
     49          	{
     50          		b_sys.modeswitch_flag = 0;
     51          		delay_5ms(100); //ÕâÀïÑÓ³Ù500MS£¬·ÀÖ¹¿¨¼ì²â²»ÔÚÏßÁË£¬µ«¿¨Ã»ÓÐÒÆ×ß£¨¼´CMDÓëDATAÃ»ÓÐ¶Ï¿ª£©
     52          	}
     53          
     54          	SPMODE &= ~0x0F;
     55          
     56          #if ((FM_CLOCK == USE_IO_32KHZ_CLK) || (FM_CLOCK == USE_IO_12MHZ_CLK))
     57          	io_output_clk_start();
     58          #elif ((FM_CLOCK == USE_SD_IO_32KHZ_CLK) || (FM_CLOCK == USE_SD_IO_12MHZ_CLK))
     59          	sdclk_output_clk_start();
     60          #endif
     61          
     62          #if ((FM_CLOCK == USE_SD_IO_32KHZ_CLK) || (FM_CLOCK == USE_SD_IO_12MHZ_CLK) || FM_CLK_IO_MUX_SDCLK)
     63          	fm_ctl.fm_mode_flag = 1;
     64          #endif
     65          
     66          #if AMUX_FM_EN
     67          #if((defined AX107X_TAG) && (AMUX_FM == AMUX_CH_MM))
     68          	mic_enable();
     69          	DACACON6 = (DACACON6 & 0x83) | (GAIN_0DB <<2);
     70          #else
     71          
     72          #if((defined AX107X_TAG)\
     73              && ((AMUX_FM == AMUX_CH_0M)||(AMUX_FM == AMUX_CH_2M)||(AMUX_FM == AMUX_CH_4M)))
     74          	DACACON6 |= BIT(0);//´ò¿ªMICÓÃ×÷LINE¹¦ÄÜ
     75          #endif
     76          
     77          	amux_init(AMUX_FM);                   //³õÊ¼»¯FMµÄAMUX
     78          #if ENERGY_DISP_EN
     79          	energy_init();
     80          #endif
     81          #endif  //((defined AX107X_TAG) && (AMUX_FM == AMUX_CH_MM))
     82          #endif
     83          
     84          	fm_rx_init();
     85          	delay_5ms(5);
     86          	fm_rx_set_freq(fm_ctl.fm_freq);
     87          	mute_disable();
     88          #if AMUX_FM_WITH_NO_CAP
     89          	user_change_volume(VOLUME_MAX);
     90          	dac_trim_process();
     91          #endif
     92          #if AMUX_FM_EN
     93          #if AMUX_FM_WITH_NO_CAP
     94          	fm_rx_set_vol(sys_ctl.volume);
     95          #else
     96          	fm_rx_set_vol(VOLUME_MAX);            //FMÒôÁ¿ÉèÖÃ×î´ó
     97          #endif
     98          #if DAC_FADE_EN
     99          #if KEY_VOICE_EN
    100          	dac_fade_in(1);
    101          #else
    102          	dac_fade_in(0);
    103          #endif
    104          #if AMUX_FM_WITH_NO_CAP
    105          	delay_5ms(60);
    106          	trim_B_to_A();
    107          #endif
    108          #else
    109          #if KEY_VOICE_EN
    110          	b_dac.digvol_en = 1;
    111          #else
    112          	b_dac.digvol_en = 0;
    113          #endif
    114          	dac_set_volume_direct(sys_ctl.volume);
    115          #endif
    116          #if AMUX_FM_WITH_NO_CAP
    117          	DACACON4 |= BIT(5);
    118          	delay_5ms(2);
    119          #endif
    120          #if (!KEY_VOICE_EN)
    121          	DAC_ANL_DIS();
    122          #endif
    123          #else   //AMUX_FM_EN
    124          #if (!KEY_VOICE_EN)
    125          	DACACON2 &= ~BIT(0);                  //disable dac hp
    126          	DAC_ANL_DIS();                        //disable dac
    127          #endif
    128          	fm_rx_set_vol(sys_ctl.volume);
    129          #endif
    130          
    131          #if (DISP_TYPE==DISP_LED)
    132          	ocx.led_sta = LED_STA_ON;
    133          #endif
    134          }
    135          
    136          //FMÈÎÎñÍË³ö
    137          #pragma location="TASK_FM_SEG"
    138          static void task_fm_exit(void)
    139          {
    140          #if AMUX_FM_EN
    141          #if DAC_FADE_EN
    142          #if AMUX_FM_WITH_NO_CAP
    143          	fm_dac_fade_out();
    144          #else
    145          	dac_fade_out();
    146          	dac_fade_wait();
    147          #endif
    148          #endif
    149          #if AMUX_FM_WITH_NO_CAP
    150          	delay_5ms(2);
    151          	trim_B_to_A();
    152          	dac_ctl.anl_vol = tbl_anlvol[sys_ctl.volume];   //ÉèÖÃµ±Ç°Ä£ÄâÒôÁ¿¼¶Êý
    153          #endif
    154          #if (!KEY_VOICE_EN)
    155          	DAC_ANL_EN();
    156          #endif
    157          #if ENERGY_DISP_EN
    158          	energy_stop();
    159          #endif
    160          
    161          #if((defined AX107X_TAG) && (AMUX_LINEIN == AMUX_CH_MM))
    162          	mic_disable();
    163          #else
    164          #if((defined AX107X_TAG) && ((AMUX_LINEIN == AMUX_CH_0M)||(AMUX_LINEIN == AMUX_CH_2M)||(AMUX_LINEIN == AMUX_CH_4M)))
    165          	DACACON6 &= ~BIT(0);//¹Ø±ÕMICÓÃ×÷LINE¹¦ÄÜ
    166          #endif
    167          	amux_exit();
    168          #endif
    169          
    170          #else  //AMUX_FM_EN
    171          #if (!KEY_VOICE_EN)
    172          	DACACON2 |= BIT(0);                  //enable dac hp
    173          	DAC_ANL_EN();
    174          #endif
    175          	dac_ctl.anl_vol = tbl_anlvol[sys_ctl.volume];   //ÉèÖÃµ±Ç°Ä£ÄâÒôÁ¿¼¶Êý
    176          #endif /*END AMUX_FM_EN*/
    177          
    178          #if ((FM_CLOCK == USE_IO_32KHZ_CLK) || (FM_CLOCK == USE_IO_12MHZ_CLK))
    179          	io_output_clk_stop();
    180          #elif ((FM_CLOCK == USE_SD_IO_32KHZ_CLK) || (FM_CLOCK == USE_SD_IO_12MHZ_CLK))
    181          	sdclk_output_clk_stop();
    182          	fm_ctl.fm_mode_flag = 0;
    183          #endif
    184          
    185          	fm_rx_off();
    186          #if ((FM_CLOCK == USE_SD_IO_32KHZ_CLK) || (FM_CLOCK == USE_SD_IO_12MHZ_CLK))
    187          	SDCON0 &= ~BIT(1);                 //disable clk keeping out
    188          #endif
    189          
    190          #if FM_CLK_IO_MUX_SDCLK
    191          	printf("clk_io_mux_sdclk\n");
    192          	if(device_is_online(DEVICE_SDMMC))
    193          	{
    194          		SDCON0 = 0x01;
    195          	}
    196          	sd_port_init(0);
    197          	fm_ctl.fm_mode_flag = 0;
    198          #endif
    199          
    200          	SPMODE |= 0x0F;
    201          }
    202          
    203          //FMÈÎÎñÊÂ¼þ
    204          #pragma location="TASK_FM_SEG"
    205          static void task_fm_event(void)
    206          {
    207          	comm_event(2);                          //UÅÌ¡¢SD¿¨²åÈë£¬²»¼¤»î
    208          
    209          #if USE_IR_NUM
    210          	if(ocx.event == 1)
    211          	{
    212          		ocx.event = 0;
    213          		if((ocx.number > 0) && (ocx.number <= fm_ctl.ch_total))
    214          		{
    215          			fm_ctl.ch_cur = ocx.number;
    216          			fm_get_freq();
    217          			fm_rx_set_freq(fm_ctl.fm_freq);
    218          			mem_write_cur_channel();
    219          		}
    220          #if FM_SEEK_50K_STEP
    221          		else if((ocx.number >= FM_MIN_FREQ/10) && (ocx.number <= FM_MAX_FREQ/10))
    222          		{
    223          			fm_ctl.fm_freq = ocx.number;
    224          			fm_rx_set_freq(fm_ctl.fm_freq*10);
    225          		}
    226          #else
    227          		else if((ocx.number >= FM_MIN_FREQ) && (ocx.number <= FM_MAX_FREQ))
    228          		{
    229          			fm_ctl.fm_freq = ocx.number;
    230          			fm_rx_set_freq(fm_ctl.fm_freq);
    231          			mem_write_cur_channel();
    232          		}
    233          #endif
    234          
    235          	}
    236          #endif
    237          }
    238          
    239          //FM×Ô¶¯ËÑÌ¨
    240          #pragma location="TASK_FM_SEG"
    241          static void fm_scan(void)
    242          {
    243          	u8 seek_sta;
    244          
    245          	fm_ctl.ch_total = 0;
    246          	fm_ctl.ch_cur = 0;
    247          	fm_ctl.fm_freq = FM_MIN_FREQ;             //´Ó87.5¿ªÊ¼ËÑÌ¨
    248          #if (SYS_MEM == MEM_INTERNAL)
    249          	mem_ctl.prev_ch_number = 0;
    250          #endif
    251          #if AMUX_FM_EN
    252          #if DAC_FADE_EN
    253          #if AMUX_FM_WITH_NO_CAP
    254          	fm_dac_fade_out();
    255          #else
    256          	dac_fade_out();
    257          	dac_fade_wait();
    258          #endif
    259          #endif
    260          #endif
    261          	fm_rx_set_vol(0);
    262          	mem_fmbuf_clr();
    263          #if (DISP_TYPE==DISP_LED)
    264          	ocx.led_sta = LED_STA_FAST_GLITTER;
    265          #endif
    266          
    267          	//printf("fm_scan: %d\n", fm_ctl.fm_freq);
    268          	while(1)
    269          	{
    270          		//printf(".");
    271          		WATCHDOG_CLR();
    272          		seek_sta = fm_rx_seek(fm_ctl.fm_freq);
    273          		if(seek_sta > 0)        //ÊÕµ½Ò»¸öÌ¨
    274          		{
    275          #if ((FM_SEEK_50K_STEP) && (FM_RTC6218_EN))
    276          			if((fm_ctl.fm_type == FM_RTC6218) && (seek_sta == 2))
    277          			{
    278          				fm_ctl.fm_freq += 5;         //RTC6218·µ»Ø2´ú±í+50KHzµÄÆµµã
    279          			}
    280          #endif
    281          			fm_rx_set_freq(fm_ctl.fm_freq);
    282          #if AMUX_FM_EN
    283          #if AMUX_FM_WITH_NO_CAP
    284          			fm_rx_set_vol(sys_ctl.volume);
    285          #else
    286          			fm_rx_set_vol(VOLUME_MAX);
    287          #endif
    288          #if DAC_FADE_EN
    289          #if AMUX_FM_WITH_NO_CAP
    290          			fm_dac_fade_in();
    291          #else
    292          			dac_fade_in(0);
    293          #endif
    294          #endif
    295          #else
    296          			fm_rx_set_vol(sys_ctl.volume);
    297          #endif
    298          
    299          			fm_ctl.ch_cur++;
    300          			fm_ctl.ch_total++;
    301          
    302          			showch(fm_ctl.ch_cur);
    303          			//printf("\nch%d, freq=%d\n", fm_ctl.ch_cur, fm_ctl.fm_freq);
    304          
    305          			mem_write_fm();     //±£´æÆµµÀ
    306          			delay_5ms(200);             //·ÅÒ»¶Îrég
    307          #if AMUX_FM_EN
    308          #if DAC_FADE_EN
    309          #if AMUX_FM_WITH_NO_CAP
    310          			fm_dac_fade_out();
    311          #else
    312          			dac_fade_out();
    313          			dac_fade_wait();
    314          #endif
    315          #endif
    316          #endif
    317          			fm_rx_set_vol(0);
    318          		}
    319          #if FM_SEEK_50K_STEP
    320          		fm_ctl.fm_freq += 5;
    321          #else
    322          		fm_ctl.fm_freq++;
    323          #endif
    324          		if(fm_ctl.fm_freq > FM_MAX_FREQ)
    325          		{
    326          			break;
    327          		}
    328          
    329          		task_fm_display();
    330          
    331          		if(get_msg() == KU_PLAY)
    332          		{
    333          			goto _exit_fm_scan;
    334          		}
    335          
    336          #if FM_CLK_IO_MUX_SDCLK //¸´ÓÃSD_CLKµÄIOÊä³öÊ±ÖÓ¸øFM
    337          		if((b_sys.dev_change) && device_need_activate(DEVICE_SDMMC))    //SD¿¨²åÈë²»¼¤»î
    338          		{
    339          			task_ctl.work_sta = TASK_MUSIC;
    340          		}
    341          		else
    342          #endif
    343          		{
    344          			comm_event(2);                          //µ÷ÓÃ¹«¹²ÊÂ¼þ
    345          		}
    346          
    347          		if(task_ctl.work_sta != TASK_FM)
    348          		{
    349          #if ((FM_CLOCK == USE_SD_IO_32KHZ_CLK) || (FM_CLOCK == USE_SD_IO_12MHZ_CLK))
    350          			SDBAUD = 182;
    351          			goto _exit_fm_scan_1;
    352          #else
    353          			goto _exit_fm_scan;
    354          #endif
    355          		}
    356          	}
    357          
    358          _exit_fm_scan:
    359          
    360          	//Ñ¡È¡µÚÒ»¸öÆµµÀ¿ªÊ¼²¥·Å
    361          	//printf("\nscan_end: %d\n", fm_ctl.fm_freq);
    362          
    363          	mem_write_fm();         //±£´æÆµµÀ
    364          
    365          	if(!fm_ctl.ch_total)
    366          	{
    367          		fm_ctl.ch_total = 1;    //Î´ËÑµ½Ì¨Ê±½«×ÜÌ¨ÊýÉèÎª1
    368          	}
    369          	fm_ctl.ch_cur = 1;
    370          	fm_get_freq();
    371          
    372          #if (DISP_TYPE==DISP_LED)
    373          	ocx.led_sta = LED_STA_ON;
    374          #endif
    375          	showch(fm_ctl.ch_cur);
    376          	//printf("sel_ch%d, freq=%d total_ch=%d\n", fm_ctl.ch_cur, fm_ctl.fm_freq, fm_ctl.ch_total);
    377          
    378          	fm_rx_set_freq(fm_ctl.fm_freq);
    379          
    380          #if ((FM_CLOCK == USE_SD_IO_32KHZ_CLK) || (FM_CLOCK == USE_SD_IO_12MHZ_CLK))
    381          _exit_fm_scan_1:
    382          #endif
    383          
    384          #if AMUX_FM_EN
    385          #if AMUX_FM_WITH_NO_CAP
    386          	fm_rx_set_vol(sys_ctl.volume);
    387          #else
    388          	fm_rx_set_vol(VOLUME_MAX);
    389          #endif
    390          #if DAC_FADE_EN
    391          #if AMUX_FM_WITH_NO_CAP
    392          	fm_dac_fade_in();
    393          #else
    394          	dac_fade_in(0);
    395          #endif
    396          #endif
    397          #else
    398          	fm_rx_set_vol(sys_ctl.volume);
    399          #endif
    400          	mem_write_channel();      //±£´æ×ÜÌ¨Êý¡¢µ±Ç°µçÌ¨ÐòºÅ¡¢µ±Ç°ÆµÂÊ
    401          }
    402          
    403          //FMÈÎÎñÏûÏ¢´¦Àí
    404          #pragma location="TASK_FM_SEG"
    405          static void task_fm_deal_msg(u8 msg)
    406          {
    407          #if FM_SEMIAUTOMATIC_SEEK
    408          	bool seek_flag = 0;
    409          	u16 seek_count = 0;
    410          	u8 seek_sta;
    411          #endif
    412          
    413          	switch(msg)
    414          	{
    415          		//×Ô¶¯ËÑÌ¨
    416          	case KU_PLAY:
    417          	case KU_PLAY_AND_MODE:
    418          		fm_scan();
    419          		break;
    420          
    421          		//ÏÂÒ»¸öÆµµÀ¡¢ÉÏÒ»¸öÆµµÀ
    422          	case KU_NEXT:
    423          	case KU_PLUS:
    424          		fm_ctl.ch_cur += 2;
    425          	case KU_PREV:
    426          	case KU_MINUS:
    427          		fm_ctl.ch_cur--;
    428          		if(fm_ctl.ch_cur > fm_ctl.ch_total)    //·¶Î§:1--fm_ctl.ch_total
    429          		{
    430          			fm_ctl.ch_cur = 1;
    431          		}
    432          		else if(fm_ctl.ch_cur == 0)
    433          		{
    434          			fm_ctl.ch_cur = fm_ctl.ch_total;
    435          		}
    436          		fm_get_freq();
    437          #if AMUX_FM_EN
    438          #if DAC_FADE_EN
    439          #if AMUX_FM_WITH_NO_CAP
    440          		fm_dac_fade_out();
    441          #else
    442          		dac_fade_out();
    443          		dac_fade_wait();
    444          #endif
    445          #endif
    446          #endif
    447          		fm_rx_set_vol(0);
    448          		fm_rx_set_freq(fm_ctl.fm_freq);
    449          #if AMUX_FM_EN
    450          #if AMUX_FM_WITH_NO_CAP
    451          		fm_rx_set_vol(sys_ctl.volume);
    452          #else
    453          		fm_rx_set_vol(VOLUME_MAX);
    454          #endif
    455          #if DAC_FADE_EN
    456          #if AMUX_FM_WITH_NO_CAP
    457          		fm_dac_fade_in();
    458          #else
    459          		dac_fade_in(0);
    460          #endif
    461          #endif
    462          #else
    463          		fm_rx_set_vol(sys_ctl.volume);
    464          #endif
    465          		showch(fm_ctl.ch_cur);
    466          		//printf("\nch%d, freq=%d\n", fm_ctl.ch_cur, fm_ctl.fm_freq);
    467          		mem_write_cur_channel();        //±£´æµ±Ç°µçÌ¨ÐòºÅºÍÆµÂÊ
    468          		break;
    469          
    470          #if FM_SEMIAUTOMATIC_SEEK
    471          	case KL_NEXT:
    472          		seek_flag = 1;
    473          	case KL_PREV:
    474          #if AMUX_FM_EN
    475          #if DAC_FADE_EN
    476          #if AMUX_FM_WITH_NO_CAP
    477          		fm_dac_fade_out();
    478          #else
    479          		dac_fade_out();
    480          		dac_fade_wait();
    481          #endif
    482          #endif
    483          #endif
    484          		fm_rx_set_vol(0);
    485          #if (DISP_TYPE==DISP_LED)
    486          		ocx.led_sta = LED_STA_FAST_GLITTER;
    487          #endif
    488          		while(1)
    489          		{
    490          			WATCHDOG_CLR();
    491          #if FM_SEEK_50K_STEP
    492          			if(seek_flag)
    493          			{
    494          				fm_ctl.fm_freq += 5;
    495          			}
    496          			else
    497          			{
    498          #if FM_RTC6218_EN
    499          				if((fm_ctl.fm_type == FM_RTC6218))
    500          				{
    501          					fm_ctl.fm_freq -= 10;
    502          				}
    503          				else
    504          #endif
    505          				{
    506          					fm_ctl.fm_freq -= 5;
    507          				}
    508          			}
    509          #else
    510          			if(seek_flag)
    511          			{
    512          				fm_ctl.fm_freq++;
    513          			}
    514          			else
    515          			{
    516          				fm_ctl.fm_freq--;
    517          			}
    518          #endif
    519          			if(fm_ctl.fm_freq > FM_MAX_FREQ)
    520          			{
    521          				fm_ctl.fm_freq = FM_MIN_FREQ;
    522          			}
    523          			else if(fm_ctl.fm_freq < FM_MIN_FREQ)
    524          			{
    525          				fm_ctl.fm_freq = FM_MAX_FREQ;
    526          			}
    527          
    528          			task_fm_display();
    529          
    530          			seek_sta = fm_rx_seek(fm_ctl.fm_freq);
    531          			if(seek_sta > 0)
    532          			{
    533          #if ((FM_SEEK_50K_STEP) && (FM_RTC6218_EN))
    534          				if((fm_ctl.fm_type == FM_RTC6218) && (seek_sta == 2))
    535          				{
    536          					fm_ctl.fm_freq += 5;         //RTC6218·µ»Ø2´ú±í+50KHzµÄÆµµã
    537          				}
    538          #endif
    539          				break;
    540          			}
    541          			seek_count++;
    542          			if(seek_count == (FM_MAX_FREQ - FM_MIN_FREQ))
    543          			{
    544          				break;
    545          			}
    546          		}
    547          #if AMUX_FM_EN
    548          #if AMUX_FM_WITH_NO_CAP
    549          		fm_rx_set_vol(sys_ctl.volume);
    550          #else
    551          		fm_rx_set_vol(VOLUME_MAX);
    552          #endif
    553          #if DAC_FADE_EN
    554          #if AMUX_FM_WITH_NO_CAP
    555          		fm_dac_fade_in();
    556          #else
    557          		dac_fade_in(0);
    558          #endif
    559          #endif
    560          #else
    561          		fm_rx_set_vol(sys_ctl.volume);
    562          #endif
    563          #if (DISP_TYPE==DISP_LED)
    564          		ocx.led_sta = LED_STA_ON;
    565          #endif
    566          		mem_write_cur_channel();
    567          		break;
    568          
    569          #endif
    570          
    571          #if USE_IR_NUM
    572          	case T_KEY_NUM_0:
    573          	case T_KEY_NUM_1:
    574          	case T_KEY_NUM_2:
    575          	case T_KEY_NUM_3:
    576          	case T_KEY_NUM_4:
    577          	case T_KEY_NUM_5:
    578          	case T_KEY_NUM_6:
    579          	case T_KEY_NUM_7:
    580          	case T_KEY_NUM_8:
    581          	case T_KEY_NUM_9:
    582          		shownumsel(msg - T_KEY_NUM_0);
    583          		break;
    584          #endif
    585          #if ENERGY_DISP_EN
    586          	case KL_PLAYMODE:
    587          		if(!ocx.disp_energy)
    588          		{
    589          			energy_start();
    590          		}
    591          		else
    592          		{
    593          			energy_close();
    594          		}
    595          		disp.update = 1;
    596          		break;
    597          #endif
    598          
    599          #if (!AMUX_FM_EN)||(AMUX_FM_WITH_NO_CAP)
    600          	case KU_VOL_DOWN:
    601          	case KH_VOL_DOWN:
    602          	case KH_MINUS:
    603          		user_set_fm_volume(sys_ctl.volume - 1);
    604          		showvol();
    605          		break;
    606          	case KU_VOL_UP:
    607          	case KH_VOL_UP:
    608          	case KH_PLUS:
    609          		user_set_fm_volume(sys_ctl.volume + 1);
    610          		showvol();
    611          		break;
    612          #endif
    613          
    614          	default:
    615          		deal_msg(msg);
    616          		break;
    617          	}
    618          }
    619          
    620          //FMÈÎÎñÖ÷Á÷³Ì
    621          #pragma location="TASK_FM_SEG"
    622          void task_fm(void)
    623          {
    624          	printf("task_fm\n");
    625          
    626          	if(fm_ctl.fm_type == FM_NO)
    627          	{
    628          		printf("no fm module\n");
    629          		task_ctl.work_sta = TASK_EXIT;
    630          		return;
    631          	}
    632          
    633          	task_fm_enter();
    634          	while(task_ctl.work_sta == TASK_FM)
    635          	{
    636          		task_fm_event();
    637          		task_fm_deal_msg(get_msg());
    638          		task_fm_display();
    639          	}
    640          	task_fm_exit();
    641          }
    642          #endif
    643          


   Segment part sizes:

     Function/Label Bytes
     -------------- -----

 
 
 0 bytes of memory

Errors: none
Warnings: none
