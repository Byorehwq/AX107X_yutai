##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   10/Sep/2015  19:03:26 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  near                                              #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  C:\Documents and Settings\Administrator\×ÀÃæ\lily #
#                          \15BC178B_Lily_AX1070_20150908\15BC178B_Lily_AX10 #
#                          70_20150908\fm\rtc6218.c                          #
#    Command line       =  -I "C:\Program Files\IAR Systems\Embedded         #
#                          Workbench 4.05 Evaluation version\8051\INC\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench  #
#                          4.05 Evaluation version\8051\INC\CLIB\" -I        #
#                          "C:\Documents and Settings\Administrator\×ÀÃæ\lil #
#                          y\15BC178B_Lily_AX1070_20150908\15BC178B_Lily_AX1 #
#                          070_20150908\COMMON\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\INC\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily #
#                          _AX1070_20150908\config\" -I "C:\Documents and    #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\api\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily #
#                          _AX1070_20150908\fm\" -I "C:\Documents and        #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\fat\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily #
#                          _AX1070_20150908\display\" -I "C:\Documents and   #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\displ #
#                          ay\led\" -I "C:\Documents and                     #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\displ #
#                          ay\lcd\" -I "C:\Documents and                     #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\task\ #
#                          " -I "C:\Documents and Settings\Administrator\×ÀÃ #
#                          æ\lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lil #
#                          y_AX1070_20150908\user\" -I "C:\Documents and     #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\mem\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily #
#                          _AX1070_20150908\module\" -I "C:\Documents and    #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\modul #
#                          e\kedir\" -I "C:\Documents and                    #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\key\" #
#                           -I "C:\Documents and Settings\Administrator\×ÀÃæ #
#                          \lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily #
#                          _AX1070_20150908\startmusic\" -D UART_DEBUG -D    #
#                          AX207X_TAG -lC "C:\Documents and                  #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\UART_ #
#                          Debug\List\" -o "C:\Documents and                 #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\UART_ #
#                          Debug\Obj\" -e -z9 --debug --core=plain           #
#                          --dptr=16,1 --data_model=large --code_model=near  #
#                          --calling_convention=ext_stack_reentrant          #
#                          --place_constants=code --nr_virtual_regs 20       #
#                          --extended_stack "C:\Documents and                #
#                          Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX #
#                          1070_20150908\15BC178B_Lily_AX1070_20150908\fm\rt #
#                          c6218.c"                                          #
#    List file          =  C:\Documents and Settings\Administrator\×ÀÃæ\lily #
#                          \15BC178B_Lily_AX1070_20150908\15BC178B_Lily_AX10 #
#                          70_20150908\UART_Debug\List\rtc6218.lst           #
#    Object file        =  C:\Documents and Settings\Administrator\×ÀÃæ\lily #
#                          \15BC178B_Lily_AX1070_20150908\15BC178B_Lily_AX10 #
#                          70_20150908\UART_Debug\Obj\rtc6218.r51            #
#                                                                            #
#                                                                            #
##############################################################################

C:\Documents and Settings\Administrator\×ÀÃæ\lily\15BC178B_Lily_AX1070_20150908\15BC178B_Lily_AX1070_20150908\fm\rtc6218.c
      1          #include "include.h"
      2          #include "user_i2c.h"
      3          #include "rtc6218.h"
      4          
      5          #if FM_RTC6218_EN
      6          /*===================================================================================
      7          
      8          If using stand alone x'tal the macro "INTERNAL_XTAL_6218" should be defined.
      9          In shared x'tal case, we should add 100pF capacitor on series path in front of RCLK pin.
     10          BTW, if shared x'tal voltage swing is too low, the macro "INTERNAL_XTAL_6218" should be defined.
     11          In full swing case, the macro "INTERNAL_XTAL_6218" should "NOT" be defined.
     12          
     13          ===================================================================================*/
     14          
     15          #if (FM_CLOCK == SHARE_CRYSTAL_32KHz)
     16          #define INTERNAL_XTAL_6218  //¹ÒfmÊ±Á¿µ½fmµÄÊ±ÖÓµÄ·å¶Ô·å£¨p2p)ÉÙÓÚ900mvÇÒ¿ªÆôºó²»´óÓÚ3.3vÊ±Ðè¿ªÆô£¬´ò¿ªºó¶ÔÓ¦ÖµÎª0XB4,Èç¹û¿ª»úËÀ»ú¿É³¢ÊÔÓÃ0xf0
     17          #endif
     18          
     19          #if FM_SEEK_50K_STEP
     20          #define __RTCFM_STEP_50K__                      //´ò¿ªºêÊ¹ÓÃ50k²½½ø£¬¹Ø±ÕÊ¹ÓÃ100k²½½ø
     21          #define __RTCFM_STEP_50K_CHOOSE_BEST_FROM_TW0__ //Ê¹ÓÃ50K²½½øÊ±ÎªÃâÖØ¸´£¨¼Ù£©Ì¨¹ý¶à¿É¿ªÆô
     22          #endif
     23          
     24          //#define __RTCFM_ST_STATUS_JUDGE__   //Èç¹û¾§Õñ²»ÎÈµ¼ÖÂ¼ÙÌ¨¶àÐè¿ªÆô,ÓÃÁ¢ÌåÉù¸¨ÖúÅÐ¶ÏÀ´Öð¸öÅÅ³ý£¬¼ÙÌ¨îlµã¸ù¾ÝµØÇø×ÔÐÐÌí¼Ó
     25          
     26          
     27          /*u8 RTC6218_turn_on_off[] = {  0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
     28                                          0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00,
     29                                          0x00,0xAA
     30                                     };*/
     31          
     32          #pragma constseg = RTC6218_RX_TABLE
     33          const u8  RTC6218_CKHopping[]= {0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x70,0x00, 0x20,0x00,
     34                                          0x05,0x0F, 0x0E,0x85, 0x5A,0xA6, 0xDC,0x53, 0x80,0x00, 0x00,0xA3, 0x00,0xA3,
     35                                          0xD0,0x08, 0x7F,0x80, 0x3C,0x08, 0xA6,0xCF, 0x81,0x00, 0x00,0x00, 0x01,0x40,
     36                                          0x47,0x00, 0x00,0x00
     37                                         };
     38          
     39          const u8  RTC6218_swbk5[] = {   0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x00,0x00, 0x70,0x00, 0x60,0x00,
     40                                          0x35,0x90, 0x63,0x11, 0x30,0x08, 0x00,0x17, 0x0D,0x79, 0x7D,0x2F, 0x80,0x00,
     41                                          0x02,0x01, 0x77,0x1F, 0x32,0x41, 0x26,0x28, 0xA5,0x16, 0x86,0x80, 0x00,0x00,
     42                                          0x00,0x00, 0x00,0x00
     43                                      };
     44          
     45          #if ((FM_CLOCK == USE_IO_12MHZ_CLK) || (FM_CLOCK == USE_SD_IO_12MHZ_CLK))
     46          #ifndef __RTCFM_STEP_50K__
     47          const  u8 RTC6218_power_up[] = {0xC0,0x00, 0x14,0x00, 0x00,0x00, 0x00,0x0C, 0x80,0x01, 0x70,0x00, 0x00,0x00, 0x40,0x50};  // last byte is spike threshold, the larger the more, recommand under 0x50, default 0x10
     48          #else
     49          const  u8 RTC6218_power_up[] = {0xC0,0x00, 0x18,0x00, 0x00,0x00, 0x00,0x0C, 0x80,0x01, 0x70,0x00, 0x00,0x00, 0x40,0x20};  // last byte is spike threshold, the larger the more, recommand under 0x50, default 0x10
     50          #endif
     51          
     52          #ifndef __RTCFM_STEP_50K__
     53          const u8 RTC6218_Initial_value[] =         {0xC0,0x00,0x14,0x00,0x00,0x00,0x00,0x0c,0x80,0x01,0x70,0x00,0xe0,0x00};  // RSSI_TH = 0x0C
     54          const u8 RTC6218_Initial_gotobk3value[] =  {0xC0,0x00,0x14,0x00,0x00,0x00,0x00,0x0c,0x80,0x01,0x70,0x00,0xc0,0x00};  // RSSI_TH = 0x0C
     55          #else
     56          const u8 RTC6218_Initial_value[] =         {0xC0,0x00,0x18,0x00,0x00,0x00,0x00,0x0c,0x80,0x01,0x70,0x00,0xe0,0x00};  // RSSI_TH = 0x0C
     57          const u8 RTC6218_Initial_gotobk3value[] =  {0xC0,0x00,0x18,0x00,0x00,0x00,0x00,0x0c,0x80,0x01,0x70,0x00,0xc0,0x00};  // RSSI_TH = 0x0C
     58          #endif
     59          
     60          #else
     61          
     62          #ifndef __RTCFM_STEP_50K__
     63          #ifndef INTERNAL_XTAL_6218
     64          const  u8 RTC6218_power_up[] = {0xC0,0x00, 0x14,0x00, 0x00,0x00, 0x00,0x0C, 0x80,0x00, 0x70,0x00, 0x00,0x00, 0x40,0x50};  // last byte is spike threshold, the larger the more, recommand under 0x50, default 0x10
     65          #else
     66          const  u8 RTC6218_power_up[] = {0xC0,0x00, 0x14,0x00, 0x00,0x00, 0x00,0x0C, 0x80,0x00, 0xB4,0x00, 0x00,0x00, 0x40,0x50};
     67          #endif
     68          #else
     69          #ifndef INTERNAL_XTAL_6218
     70          const  u8 RTC6218_power_up[] = {0xC0,0x00, 0x18,0x00, 0x00,0x00, 0x00,0x0C, 0x80,0x00, 0x70,0x00, 0x00,0x00, 0x40,0x20};  // last byte is spike threshold, the larger the more, recommand under 0x50, default 0x10
     71          #else
     72          const  u8 RTC6218_power_up[] = {0xC0,0x00, 0x18,0x00, 0x00,0x00, 0x00,0x0C, 0x80,0x00, 0xB4,0x00, 0x00,0x00, 0x40,0x50};
     73          #endif
     74          #endif
     75          
     76          #ifndef __RTCFM_STEP_50K__
     77          #ifndef INTERNAL_XTAL_6218
     78          const u8 RTC6218_Initial_value[] =         {0xC0,0x00,0x14,0x00,0x00,0x00,0x00,0x0c,0x80,0x00,0x70,0x00,0xe0,0x00};  // RSSI_TH = 0x0C
     79          const u8 RTC6218_Initial_gotobk3value[] =  {0xC0,0x00,0x14,0x00,0x00,0x00,0x00,0x0c,0x80,0x00,0x70,0x00,0xc0,0x00};  // RSSI_TH = 0x0C
     80          #else
     81          const u8 RTC6218_Initial_value[] =         {0xC0,0x00,0x14,0x00,0x00,0x00,0x00,0x0c,0x80,0x00,0xB4,0x00,0xe0,0x00};  // RSSI_TH = 0x0C
     82          const u8 RTC6218_Initial_gotobk3value[] =  {0xC0,0x00,0x14,0x00,0x00,0x00,0x00,0x0c,0x80,0x00,0xB4,0x00,0xc0,0x00};  // RSSI_TH = 0x0C
     83          #endif
     84          #else
     85          #ifndef INTERNAL_XTAL_6218
     86          const u8 RTC6218_Initial_value[] =         {0xC0,0x00,0x18,0x00,0x00,0x00,0x00,0x0c,0x80,0x00,0x70,0x00,0xe0,0x00};  // RSSI_TH = 0x0C
     87          const u8 RTC6218_Initial_gotobk3value[] =  {0xC0,0x00,0x18,0x00,0x00,0x00,0x00,0x0c,0x80,0x00,0x70,0x00,0xc0,0x00};  // RSSI_TH = 0x0C
     88          #else
     89          const u8 RTC6218_Initial_value[] =         {0xC0,0x00,0x18,0x00,0x00,0x00,0x00,0x0c,0x80,0x00,0xB4,0x00,0xe0,0x00};  // RSSI_TH = 0x0C
     90          const u8 RTC6218_Initial_gotobk3value[] =  {0xC0,0x00,0x18,0x00,0x00,0x00,0x00,0x0c,0x80,0x00,0xB4,0x00,0xc0,0x00};  // RSSI_TH = 0x0C
     91          #endif
     92          #endif
     93          
     94          #endif /*END USE_IO_12MHZ_CLK*/
     95          
     96          const u8 RTC6218_Initial_value1[] = {0x00,0x72,0x00,0xFF,0x00,0x1F,0x03,0xFF,0x56,0xD1,0x13,0xB7,0x00,0x00};
     97          
     98          __no_init __xdata u8 RTC6218_reg_data[32]@"RTC6218_BUF";
     99          
    100          #pragma constseg=default
    101          
    102          /*
    103          void delay_nop(u8 n)
    104          {
    105              while (n--)
    106                  asm("nop");
    107          }*/
    108          
    109          extern void delay_nop(u8 n);
    110          
    111          void OperationRTC6218_write(const u8 __code *data, u8 numBytes)@"RTC6218_RX"
    112          {
    113          	fm_i2c_start();
    114          	fm_i2c_send_byte(0xc8);
    115          	fm_i2c_recv_ack();
    116          	for(u8 j = 0; j < numBytes; j++)
    117          	{
    118          		fm_i2c_send_byte(data[j]);
    119          		fm_i2c_recv_ack();
    120          	}
    121          	delay_nop(10);
    122          	fm_i2c_stop();
    123          }
    124          
    125          void OperationRTC6218_write_a(u8 *data, u8 numBytes)@"RTC6218_RX"
    126          {
    127          	fm_i2c_start();
    128          	fm_i2c_send_byte(0xc8);
    129          	fm_i2c_recv_ack();
    130          	for(u8 j = 0; j < numBytes; j++)
    131          	{
    132          		fm_i2c_send_byte(data[j]);
    133          		fm_i2c_recv_ack();
    134          	}
    135          	delay_nop(10);
    136          	fm_i2c_stop();
    137          }
    138          
    139          void OperationRTC6218_power_on_off(u8 power_sta)@"RTC6218_RX"
    140          {
    141          	fm_i2c_start();
    142          	fm_i2c_send_byte(0xc8);
    143          	fm_i2c_recv_ack();
    144          	for(u8 j = 0; j < 28; j++)
    145          	{
    146          		fm_i2c_send_byte(0x00);
    147          		fm_i2c_recv_ack();
    148          	}
    149          	fm_i2c_send_byte(power_sta);
    150          	fm_i2c_recv_ack();
    151          	fm_i2c_send_byte(0xAA);
    152          	fm_i2c_recv_ack();
    153          	delay_nop(10);
    154          	fm_i2c_stop();
    155          }
    156          
    157          void OperationRTC6218_read(u8 *data, u8 numBytes)@"RTC6218_RX"
    158          {
    159          	fm_i2c_start();
    160          	fm_i2c_send_byte(0xc9);
    161          	fm_i2c_recv_ack();
    162          	for(u8 j = 0; j < numBytes; j++)
    163          	{
    164          		data[j] = fm_i2c_read_byte();
    165          		if(j==numBytes-1)
    166          			fm_i2c_send_nack();
    167          		else
    168          			fm_i2c_send_ack();
    169          	}
    170          	delay_nop(10);
    171          	fm_i2c_stop();
    172          }
    173          
    174          /*************************************************************
    175          *  Radio get ID
    176          *
    177          *************************************************************/
    178          u8 RTC6218_online(void)@"RTC6218_RX"
    179          {
    180          	for(u8 i = 0; i < 3; i++)
    181          	{
    182          		OperationRTC6218_read(RTC6218_reg_data,16);
    183          		if((RTC6218_reg_data[12] == 0x16) && (RTC6218_reg_data[13] == 0x88))
    184          		{
    185          			RTC6218_off();          //·ÀÖ¹¸´Î»ºó´®ÒôÎÊÌâ
    186          			return 1;
    187          		}
    188          	}
    189          	return 0;
    190          }
    191          
    192          void RTC6218_init(void)@"RTC6218_RX"
    193          {
    194          	//RTC6218_turn_on_off[28] = 0x16;
    195          	//OperationRTC6218_write_a(RTC6218_turn_on_off,30);
    196          	OperationRTC6218_power_on_off(0x16);
    197          	delay_5ms(5);
    198          	//RTC6218_turn_on_off[28] = 0x96;
    199          	//OperationRTC6218_write_a(RTC6218_turn_on_off,30);
    200          	OperationRTC6218_power_on_off(0x96);
    201          	delay_5ms(40);
    202          	OperationRTC6218_write(RTC6218_CKHopping,46);
    203          	delay_5ms(1);
    204          	OperationRTC6218_write(RTC6218_swbk5,46);
    205          	delay_5ms(1);
    206          	OperationRTC6218_write(RTC6218_power_up,16);
    207          	delay_5ms(20);
    208          }
    209          
    210          
    211          
    212          void RTC6218_off(void)@"RTC6218_RX"
    213          {
    214          	//RTC6218_turn_on_off[28] = 0x16;
    215          	//OperationRTC6218_write_a(RTC6218_turn_on_off,30);
    216          	OperationRTC6218_power_on_off(0x16);
    217          	delay_nop(20);
    218          }
    219          
    220          
    221          
    222          /**************************************
    223          
    224          RTC6218_Set_Property_FM_Volume()
    225          
    226          FM_Volumn: 0~15
    227          
    228          ***************************************/
    229          
    230          void RTC6218_set_vol(u8 FM_Volumn)@"RTC6218_RX"
    231          {
    232          	// Some FM IC has 17 level, RTC serise only level 16
    233          	//u8 RTC6218_set_property[2] = {0xC0,0x0F};
    234          	u8 RTC6218_set_property[2];
    235          	if(FM_Volumn > 15)
    236          	{
    237          		FM_Volumn = 15;
    238          	}
    239          	RTC6218_set_property[0] = 0xC0;
    240          	RTC6218_set_property[1] = FM_Volumn;
    241          	OperationRTC6218_write_a(RTC6218_set_property,2);
    242          
    243          }
    244          
    245          
    246          /**************************************
    247          RTC6218_FM_Tune_Freq()
    248          
    249          channel_freq: 8750~10800
    250          channel_space: 50,100,200
    251          ***************************************/
    252          __no_init __xdata u8 RTC6218_channel_start_tune[4] @ "RTC6218_BUF";
    253          __no_init __xdata u8 RTC6218_channel_stop_tune[4] @ "RTC6218_BUF";
    254          void RTC6218_set_freq(u16 channel_freq)@"RTC6218_RX"
    255          {
    256          
    257          	u16 freq_reg_data;
    258          	u8 loop_counter = 0;
    259          
    260          #ifndef __RTCFM_STEP_50K__
    261          	//u8 RTC6218_channel_start_tune[4] = {0xC0,0x00,0x94,0xCA};    //107.7MHz
    262          	//u8 RTC6218_channel_stop_tune[4] = {0xC0,0x00,0x14,0xCA};
    263          	RTC6218_channel_start_tune[0] = RTC6218_channel_stop_tune[0] = 0xC0;
    264          	RTC6218_channel_start_tune[2] = 0x94;
    265          	RTC6218_channel_stop_tune[2] = 0x14;
    266          	channel_freq=channel_freq*10;
    267          #else
    268          	//u8 RTC6218_channel_start_tune[4] = {0xC0,0x00,0x98,0xCA};    //107.7MHz
    269          	//u8 RTC6218_channel_stop_tune[4] = {0xC0,0x00,0x18,0xCA};
    270          	RTC6218_channel_start_tune[0] = RTC6218_channel_stop_tune[0] = 0xC0;
    271          	RTC6218_channel_start_tune[2] = 0x98;
    272          	RTC6218_channel_stop_tune[2] = 0x18;
    273          #endif
    274          	//u8 volume_temp = 0;
    275          	// store volume setting for hardware seek complete.
    276          	OperationRTC6218_read(RTC6218_reg_data, 18);
    277          	//volume_temp = RTC6218_reg_data[17] & 0x0f;
    278          
    279          	//RTC6218_channel_start_tune[1] = (RTC6218_channel_start_tune[1] & 0xf0) | volume_temp;
    280          	//RTC6218_channel_stop_tune[1] = (RTC6218_channel_stop_tune[1] & 0xf0) | volume_temp;
    281          	RTC6218_channel_start_tune[1] = RTC6218_reg_data[17] & 0x0f;
    282          	RTC6218_channel_stop_tune[1] = RTC6218_channel_start_tune[1];
    283          
    284          	//set tune bit
    285          #ifndef __RTCFM_STEP_50K__
    286          	freq_reg_data = (channel_freq - 7600)/10;
    287          #else
    288          	freq_reg_data = (channel_freq - 7600)/5;
    289          #endif
    290          
    291          	RTC6218_channel_start_tune[3] = freq_reg_data & 0xff;
    292          	RTC6218_channel_start_tune[2] = (RTC6218_channel_start_tune[2] & 0xfc) | (freq_reg_data >> 8);
    293          
    294          	RTC6218_channel_stop_tune[3] = RTC6218_channel_start_tune[3] ;
    295          
    296          	RTC6218_channel_start_tune[2] &= 0x7f;
    297          	OperationRTC6218_write_a(RTC6218_channel_start_tune, 4);
    298          	delay_nop(10);
    299          	RTC6218_channel_start_tune[2] |= 0x80;
    300          	OperationRTC6218_write_a(RTC6218_channel_start_tune, 4);
    301          	delay_nop(10);
    302          	do
    303          	{
    304          		delay_5ms(10);
    305          		OperationRTC6218_read(RTC6218_reg_data, 2);
    306          		loop_counter++;
    307          		WATCHDOG_CLR();
    308          	}
    309          	while(((RTC6218_reg_data[0]&0x40) == 0) && (loop_counter < 80));        //for loop_counter, when tune, the loop time must > 60ms
    310          	loop_counter = 0;
    311          
    312          	//clear tune bit
    313          	OperationRTC6218_write_a(RTC6218_channel_stop_tune, 4);
    314          	//wait STC=0
    315          	do
    316          	{
    317          		OperationRTC6218_read(RTC6218_reg_data, 2);
    318          		loop_counter++;
    319          	}
    320          	while(((RTC6218_reg_data[0]&0x40) != 0) && (loop_counter < 0XFF));
    321          
    322          }
    323          #ifdef __RTCFM_ST_STATUS_JUDGE__
    324          bool g_need_st_judge = 0;
    325          u8 killed_by_mono_count=0, real_count=0;
    326          
    327          /**********************************************************************************
    328          *   set_flag = 0: set bk3_b and bk3_f to defult value
    329          *   set_flag = 1: set bk3_b and bk3_f to low ST judge th value
    330          **********************************************************************************/
    331          void RTC6218_set_bk3_regf(bool set_flag)@"RTC6218_RX"
    332          {
    333          	u8 reg_data_temp[16];
    334          	OperationRTC6218_write(RTC6218_Initial_gotobk3value,14);//change bk3
    335          	delay_nop(10);
    336          	OperationRTC6218_read(RTC6218_reg_data,32);
    337          	delay_nop(10);
    338          
    339          	memcpy(&reg_data_temp[0],&RTC6218_reg_data[0],16);
    340          
    341          	if(set_flag == 1)
    342          	{
    343          		reg_data_temp[3] = 0xff;      //set bk3_b and bk3_f to low ST judge th  value
    344          		reg_data_temp[10] = 0x0c;
    345          	}
    346          	else {
    347          		reg_data_temp[3] = 0x40;      //set bk3_b and bk3_f to defult value
    348          		reg_data_temp[10] = 0x0d;
    349          	}
    350          
    351          	memcpy(&RTC6218_reg_data[0],&RTC6218_reg_data[16],16);
    352          	memcpy(&RTC6218_reg_data[16],&reg_data_temp[0],16);
    353          
    354          	OperationRTC6218_write_a(RTC6218_reg_data,32);
    355          	delay_nop(10);
    356          	OperationRTC6218_read(RTC6218_reg_data,32);
    357          	delay_nop(10);
    358          
    359          	RTC6218_reg_data[28]=0x00;
    360          	RTC6218_reg_data[29]=0x00;
    361          	OperationRTC6218_write_a(RTC6218_reg_data+16,14); //change to bk0
    362          	delay_nop(10);
    363          }
    364          #endif //endif of  __RTCFM_ST_STATUS_JUDGE__
    365          
    366          /**************************************
    367          RTC6218_FM_Tune_Freq()
    368          
    369          channel_freq: 7600~10800
    370          channel_space: 50,100,200
    371          return value:0--²»ÊÇÌ¨,1--ÔÚÉÏ²ã´«µÄîlµãÕÒµ½Ì¨£¨Ã»´ò¿ª__RTCFM_STEP_50K_CHOOSE_BEST_FROM_TW0__)
    372          Èç¹û´ò¿ª__RTCFM_STEP_50K_CHOOSE_BEST_FROM_TW0__ return value:0,1,2
    373          ´ËÊ±·µ»ØÖµÐèÒªÉÏ²ã×ö´¦ÀíÀ´·ÀÖØ¸´Ì¨£¬ÔÚ´æÌ¨ºÍÈ«ËÑÊ±·ÅÒô¶¼ÐèÒª´¦Àí£¬0--²»ÊÇÌ¨ 1--ÔÚÉÏ²ã´«µÄîlµãÕÒµ½Ì¨ 2--ÔÚÉÏ²ã´«µÄîlµãÔÙ¼Ó50kµÄîlµãÕÒµ½Ì¨
    374          print info:
    375          No. Freq    DC  spike   Freq(+5)  DC(+5)  spike(+5)   +5/+10  SST_1->10|Cnt   rssi    stereo/killed
    376          ***************************************/
    377          u8 RTC6218_seek(u16 channel_freq)@"RTC6218_RX"
    378          {
    379          
    380          #ifdef __RTCFM_ST_STATUS_JUDGE__
    381          	u8 Stereo_flag= 0,readCnt=10,stereoCount=0;
    382          #else
    383          	u8 RSSIValue= 0;
    384          #endif
    385          
    386          	//u8 Spike_Count_1=0;
    387          
    388          #ifdef __RTCFM_STEP_50K_CHOOSE_BEST_FROM_TW0__
    389          	u16 DC_Count_1 = 0, DC_Count_2 = 0;
    390          	u8 shiftindex=0; //Çë¿´º¯ÊýÍ·µÄ·µ»ØÖµËµÃ÷£¬0±íÊ¾µ±Ç°ÉÏ²ã´«¸øµ×²ãµÄîlµã£¬1±íÊ¾ÉÏ²ã´«¸øµ×²ãµÄîlµãÔÙ+50k¡£ÔÚËÑµ½Ì¨Ê±À´¸æËßÉÏ²ã´æÌ¨ºÍ·ÅÒôÑ¡ÔñÕýÈ·µÄîlµã¡£
    391          #endif
    392          
    393          #ifdef __RTCFM_ST_STATUS_JUDGE__
    394          	/* if ((channel_freq==9000) ||(channel_freq==9595) || (channel_freq==9600) || (channel_freq == 9615) \
    395          	     || (channel_freq == 9620)|| (channel_freq == 9645)||(channel_freq >= 10790)) //¸ù¾ÝÊµ¼Ê¼ÙÌ¨îlµãÀ´Ìí¼Ó×öÁ¢ÌåÉù¸¨ÖúÅÐ¶Ï
    396          	 {
    397          	     g_need_st_judge = 1;
    398          	 }
    399          	 else
    400          	 {
    401          	     g_need_st_judge = 0;
    402          	 }*/
    403          
    404          	g_need_st_judge = 1;
    405          
    406          	if(FM_MIN_FREQ == channel_freq)
    407          	{
    408          		RTC6218_set_bk3_regf(1);                //RTC6218_set_bk3_regf_b_low_th();
    409          	}
    410          #else
    411          #ifndef __RTCFM_STEP_50K__
    412          	if((channel_freq == 960) || (channel_freq == 1080))
    413          		return 0;
    414          #else
    415          	if((channel_freq==9595) || (channel_freq==9600) || (channel_freq >= 10790))
    416          		return 0;
    417          #endif
    418          #endif //endif of __RTCFM_ST_STATUS_JUDGE__
    419          
    420          	RTC6218_set_freq(channel_freq);
    421          
    422          	OperationRTC6218_write(RTC6218_Initial_value,14);
    423          	delay_nop(10);
    424          	OperationRTC6218_read(RTC6218_reg_data, 24);   // Readout (BK7_5[15])
    425          
    426          	//Spike_Count_1 = RTC6218_reg_data[20];
    427          #ifdef __RTCFM_STEP_50K_CHOOSE_BEST_FROM_TW0__
    428          	if(RTC6218_reg_data[22]&0x2!=0)
    429          	{
    430          		DC_Count_1 = (~(((RTC6218_reg_data[22]& 0x1)<<8) | RTC6218_reg_data[23])+1) &0x1ff; //2's complement
    431          	}
    432          	else
    433          	{
    434          		DC_Count_1 = (((RTC6218_reg_data[22]& 0x1)<<8) | RTC6218_reg_data[23]); //2's complement
    435          	}
    436          #endif
    437          
    438          	OperationRTC6218_write(RTC6218_Initial_value1,14);
    439          
    440          	delay_nop(10);
    441          	//printf("%5d \t",channel_freq);
    442          	//printf("0x%02x\t0x%02x\t", DC_Count_1,Spike_Count_1);
    443          
    444          	if((RTC6218_reg_data[22]&0x80)!= 0)
    445          	{
    446          #ifdef __RTCFM_ST_STATUS_JUDGE__
    447          		if(10785 == channel_freq)
    448          		{
    449          			RTC6218_set_bk3_regf(0);        //RTC6218_set_bk3_regf_b_default();
    450          		}
    451          #endif
    452          		//printf(".");
    453          		return 0;
    454          	}
    455          	else
    456          	{
    457          		//printf("\n");
    458          #ifdef __RTCFM_ST_STATUS_JUDGE__
    459          		//printf("%02d\t",real_count+killed_by_mono_count+1);
    460          #endif
    461          		//printf("%5d \t",channel_freq);
    462          		//printf("0x%02x\t0x%02x\t", DC_Count_1,Spike_Count_1);
    463          
    464          #ifdef __RTCFM_STEP_50K_CHOOSE_BEST_FROM_TW0__
    465          		// tune second station
    466          		//printf("RTC6218_seek set channel_freq = %d+5 first\n", channel_freq);
    467          		RTC6218_set_freq(channel_freq + 5);  // if seek down channel_freq - 5
    468          		OperationRTC6218_write(RTC6218_Initial_value,14);  // change to bk7
    469          		delay_nop(10);
    470          		OperationRTC6218_read(RTC6218_reg_data, 24); // Readout (BK7_5[15])
    471          		//Spike_Count_2 = RTC6218_reg_data[20];
    472          		if(RTC6218_reg_data[22]&0x2!=0)
    473          		{
    474          			DC_Count_2 = (~(((RTC6218_reg_data[22]& 0x1)<<8) | RTC6218_reg_data[23])+1) &0x1ff; //2's complement
    475          		}
    476          		else
    477          		{
    478          			DC_Count_2 = (((RTC6218_reg_data[22]& 0x1)<<8) | RTC6218_reg_data[23]); //2's complement
    479          		}
    480          		OperationRTC6218_write(RTC6218_Initial_value1,14); // change to bk0
    481          
    482          		if((RTC6218_reg_data[22]&0x80)== 0)
    483          		{
    484          
    485          			//printf("%5d \t",channel_freq+5);
    486          			//printf("0x%02x\t0x%02x\t", DC_Count_2,Spike_Count_2);
    487          
    488          			// select minimun DC
    489          			//min_DC =  (DC_Count_1<DC_Count_2) ? DC_Count_1 : DC_Count_2;
    490          			//printf("min_DC=%x\n",min_DC);
    491          
    492          			if(DC_Count_1 < DC_Count_2)
    493          			{
    494          				//printf("RTC6218_seek set channel_freq = %d second,min_DC=%d\n", channel_freq,min_DC);
    495          				RTC6218_set_freq(channel_freq);
    496          				shiftindex = 0;
    497          				//printf("+10\t");
    498          			}
    499          			else
    500          			{
    501          				//printf("RTC6218_seek set channel_freq = %d+5 second,min_DC=%d\n", channel_freq,min_DC);
    502          				RTC6218_set_freq(channel_freq+5);
    503          				shiftindex = 1;
    504          				//printf("+10\t");
    505          			}
    506          		}
    507          		else
    508          		{
    509          			//printf("first station got\n");
    510          			//printf("\t\t\t");
    511          			//printf("\t\t");
    512          			//printf("+5\t");
    513          			RTC6218_set_freq(channel_freq);
    514          			shiftindex = 0;
    515          		}//end of "if((RTC6218_reg_data[22]&0x80)== 0)"
    516          #endif
    517          
    518          #ifndef __RTCFM_ST_STATUS_JUDGE__
    519          		delay_nop(10);     //delay_5ms(1);
    520          		OperationRTC6218_read(RTC6218_reg_data, 4);
    521          		RSSIValue = RTC6218_reg_data[3];
    522          		//printf("%d\n",RSSIValue);
    523          #endif
    524          		if(RSSIValue < 10)//
    525          		{
    526          #ifdef __RTCFM_ST_STATUS_JUDGE__
    527          			if(10785 == channel_freq)
    528          			{
    529          				RTC6218_set_bk3_regf(0);        //RTC6218_set_bk3_regf_b_default();
    530          			}
    531          #endif
    532          			return 0;
    533          		}
    534          
    535          #ifdef __RTCFM_ST_STATUS_JUDGE__
    536          		if(g_need_st_judge)
    537          		{
    538          			//delay_5ms(200);
    539          			//delay_5ms(60);
    540          			for(readCnt=10; readCnt>0; readCnt--) //stereo±êÖ¾Î»ÐèÒª300ms²ÅË¢ÐÂÒ»´Î£¬ÇÒ²»Ì«¿É¿¿¹Ê¶Á10´ÎÖÐÓÐ3´ÎÔòÈÏÎªÊÇÁ¢ÌåÉùÌ¨
    541          			{
    542          				WATCHDOG_CLR();
    543          				delay_5ms(60);//300ms
    544          				OperationRTC6218_read(RTC6218_reg_data, 2);
    545          				//printf("reg0x10= 0x%02x%02x\n",RTC6218_reg_data[0],RTC6218_reg_data[1]);
    546          				Stereo_flag = (RTC6218_reg_data[0]&0x04)>>2;
    547          				//printf("%1d",Stereo_flag);//´òÓ¡Ã¿´Î¶ÁÈ¡stereo±êÖ¾Î»
    548          
    549          				stereoCount += ((Stereo_flag) ? 1:0);
    550          
    551          
    552          				if(stereoCount >= 3)
    553          				{
    554          					break;//µ÷ÊÔÊ±¿É²»break
    555          				}
    556          			}
    557          			//printf("|%d\t %d \t",stereoCount,RSSIValue);
    558          			if(stereoCount >= 3)
    559          			{
    560          				real_count++;
    561          				//printf("streo \t\n");
    562          
    563          				//printf("real and stereo real_count = %d,stereoCount=%d\n",real_count,stereoCount);
    564          				if(10785 == channel_freq)
    565          				{
    566          					RTC6218_set_bk3_regf(0);          //RTC6218_set_bk3_regf_b_default();
    567          				}
    568          				// RTC6218_set_vol(15);
    569          #ifdef __RTCFM_STEP_50K_CHOOSE_BEST_FROM_TW0__
    570          				return 1+shiftindex; //·µ»ØÖµÐèÒªÉÏ²ã×ö´¦ÀíÀ´·ÀÖØ¸´Ì¨£¬0--²»ÊÇÌ¨ 1--ÕÒµ½Ì¨ÇÒîlµã¾ÍÊÇÉÏ²ã´«µÄîlµã 2--ÕÒµ½Ì¨ÔÚÉÏ²ã´«µÄîlµãÔÙ¼Ó50kµÄîlµã
    571          #else
    572          				return 1;
    573          #endif
    574          			}
    575          			else
    576          			{
    577          				//printf("killed \t \n");
    578          
    579          				killed_by_mono_count++;
    580          				//printf("killed couse of mono count++ = %d\n",killed_by_mono_count);
    581          				if(10785 == channel_freq)
    582          				{
    583          					RTC6218_set_bk3_regf(0);        //RTC6218_set_bk3_regf_b_default();
    584          				}
    585          				return 0;
    586          			}
    587          		}
    588          		else // else of "if(g_need_st_judge)"
    589          		{
    590          			if(10785 == channel_freq)
    591          			{
    592          				RTC6218_set_bk3_regf(0);            //RTC6218_set_bk3_regf_b_default();
    593          			}
    594          			real_count++;
    595          			//printf("\n");
    596          
    597          #ifdef __RTCFM_STEP_50K_CHOOSE_BEST_FROM_TW0__
    598          			return 1+shiftindex;
    599          #else
    600          			return 1;
    601          #endif
    602          		}
    603          #else
    604          		//printf("\n");
    605          #ifdef __RTCFM_STEP_50K_CHOOSE_BEST_FROM_TW0__
    606          		return 1+shiftindex;
    607          #else
    608          		return 1;
    609          #endif
    610          #endif
    611          	}
    612          }
    613          #endif
    614          


   Segment part sizes:

     Function/Label Bytes
     -------------- -----

 
 
 0 bytes of memory

Errors: none
Warnings: none
