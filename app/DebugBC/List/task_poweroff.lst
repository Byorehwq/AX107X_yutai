##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   27/Jun/2018  22:48:35 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  near                                              #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  task/task_poweroff.c                              #
#    Command line       =  -f option_c51.cfg (-ICOMMON\ -IINC\ -Iconfig\     #
#                          -Iapi\ -Ifm\ -Ifat\ -Idisplay\                    #
#                          -Idisplay\theme_default\ -Idisplay\led\           #
#                          -Idisplay\lcd\ -Itask\ -Iuser\ -Imem\ -Imodule\   #
#                          -Ikey\ -Istartmusic\ -Ispi\ -e -z9 --core=plain   #
#                          --dptr=16,1 --data_model=large --code_model=near  #
#                          --calling_convention=ext_stack_reentrant          #
#                          --place_constants=code --nr_virtual_regs 20       #
#                          --extended_stack) -DAX207X_TAG --debug -lC        #
#                          DebugBC/List -o DebugBC/Obj/task_poweroff.r51     #
#                          task/task_poweroff.c                              #
#    List file          =  DebugBC/List/task_poweroff.lst                    #
#    Object file        =  DebugBC/Obj/task_poweroff.r51                     #
#                                                                            #
#                                                                            #
##############################################################################

R:\18BC073A_宇泰_AX1071_xxxxxxxx_20180627\app\task\task_poweroff.c
      1          /*****************************************************************************
      2           * Module    : Task
      3           * File      : task_poweroff.c
      4           * Author    : Hanny
      5           * Email     : coldney@yahoo.com.cn
      6           * Function  : 关机任务流程
      7           *****************************************************************************/
      8          #include "include.h"

   \                                 In segment SFR_AN, at 0xa0
   \   unsigned char volatile __sfr P2
   \                     P2:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xbc
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xc8
   \   unsigned char volatile __sfr PCON0
   \                     PCON0:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xcb
   \   unsigned char volatile __sfr CLKCON
   \                     CLKCON:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xcc
   \   unsigned char volatile __sfr CLKCON1
   \                     CLKCON1:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xcd
   \   unsigned char volatile __sfr CLKCON2
   \                     CLKCON2:
   \   000000                DS 1

   \                                 In segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr WDTCON
   \                     WDTCON:
   \   000000                DS 1
      9          
     10          #if TASK_POWEROFF_EN
     11          
     12          void task_poweroff_display(void);
     13          
     14          #if SOFT_POWEROFF_EN
     15          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     16          type_poweroff_ctl poweroff_ctl;
   \                     poweroff_ctl:
   \   000000                DS 3
     17          
     18          __root void osc_delay(u16 cnt);
     19          #pragma location="TASK_POWEROFF_SEG"

   \                                 In segment TASK_POWEROFF_SEG, align 1, keep-with-next
     20          void soft_poweroff(void)
   \                     soft_poweroff:
     21          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     22          	while(1)
     23          	{
     24          		irtc_write_cmd(PWR_WR, 0x01);//diable VDDCORE
   \                     ??soft_poweroff_0:
   \   000000                ; Setup parameters for call to function irtc_write_cmd
   \   000000   7A01         MOV     R2,#0x1
   \   000002   795A         MOV     R1,#0x5a
   \   000004   12....       LCALL   irtc_write_cmd
     25          		WDTCON = 0x3d;
   \   000007   75F73D       MOV     0xf7,#0x3d
     26          		osc_delay(0x2000);             //delay 100ms
   \   00000A                ; Setup parameters for call to function osc_delay
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B20         MOV     R3,#0x20
   \   00000E   12....       LCALL   osc_delay
   \   000011   80ED         SJMP    ??soft_poweroff_0
     27          	}
     28          }
     29          
     30          #pragma location="TASK_POWEROFF_SEG"

   \                                 In segment TASK_POWEROFF_SEG, align 1, keep-with-next
     31          void soft_poweroff_enter(void)
   \                     soft_poweroff_enter:
     32          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     33          	if((sys_ctl.bat_sta == VOL_INIT)               //未完成电压检测
     34          //	        || (sys_ctl.bat_sta == VOL_GREATER_44V)     //电压高于4.4V时不能软关机，否则会损坏芯片
     35          #if DCIN_DET_EN
     36          	        || (poweroff_ctl.dc_in_sta == DC_IN)        //充电时不进软关机
     37          #endif
     38          	  )
   \   000000   90....       MOV     DPTR,#(sys_ctl + 6)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   606D         JZ      ??soft_poweroff_enter_0
     39          	{
     40          		return;
     41          	}
     42          	
     43          	disp.led1 = 0;
   \   000006   75..00       MOV     (disp + 1),#0x0
     44          	disp.led2 = 0;
   \   000009   75..00       MOV     (disp + 2),#0x0
     45          	disp.led3 = 0;
   \   00000C   75..00       MOV     (disp + 3),#0x0
     46          
     47          	printf("soft_powerdown\n");
   \   00000F                ; Setup parameters for call to function my_printf
   \   00000F   7A..         MOV     R2,#(`?<Constant "soft_powerdown\\n">` & 0xff)
   \   000011   7B..         MOV     R3,#((`?<Constant "soft_powerdown\\n">` >> 8) & 0xff)
   \   000013   12....       LCALL   my_printf
     48          	
     49          	#if (SYS_CRY == CRY_RC)          //建荣提供修改   2017/05/12
     50                  irtc_write_cmd(CFG_WR,0x0c);//
   \   000016                ; Setup parameters for call to function irtc_write_cmd
   \   000016   7A0C         MOV     R2,#0xc
   \   000018   7955         MOV     R1,#0x55
   \   00001A   12....       LCALL   irtc_write_cmd
     51              #else
     52              #if (CRY_PIN_NUM == CRY_1PIN)
     53                      irtc_write_cmd(CFG_WR,0xac);//enable 32Khz,choose 1pin osc
     54              #else
     55                      irtc_write_cmd(CFG_WR,0x8c);//enable 32Khz
     56              #endif
     57              #endif
     58          	
     59          //#if (CRY_PIN_NUM == CRY_1PIN)
     60          //	irtc_write_cmd(CFG_WR,0xac);//enable 32Khz,choose 1pin osc
     61          //#else
     62          //	irtc_write_cmd(CFG_WR,0x8c);//enable 32Khz
     63          //#endif
     64          
     65          	CLKCON |= BIT(4);           //enable rc2m
   \   00001D   43CB10       ORL     0xcb,#0x10
     66          	IE_EA =0;                   //disable IE
   \   000020   C2AF         CLR     0xa8.7
     67          
     68          	//打开2mA和8mA负载，以加快VDDCORE放电
     69          	AIPCON8 |= BIT(6) | BIT(5);
   \   000022   903058       MOV     DPTR,#0x3058
   \   000025   E0           MOVX    A,@DPTR
   \   000026   4460         ORL     A,#0x60
   \   000028   F0           MOVX    @DPTR,A
     70          
     71          	//打开P2内部500R上拉电阻且输出0，以加快VDDCORE放电
     72          	//【注意】请根据外部电路情况配置合适的IO状态
     73          	disp_port_init();
   \   000029                ; Setup parameters for call to function led_7p7s_init
   \   000029   12....       LCALL   led_7p7s_init
     74          
     75          	PUP2 = 0xff;
   \   00002C   74FF         MOV     A,#-0x1
   \   00002E   90301A       MOV     DPTR,#0x301a
   \   000031   F0           MOVX    @DPTR,A
     76          	PUP2L = 0xff;
   \   000032   903012       MOV     DPTR,#0x3012
   \   000035   F0           MOVX    @DPTR,A
     77          	P2 = 0x00;
   \   000036   75A000       MOV     0xa0,#0x0
     78          	P2DIR = 0x00;
   \   000039   75BC00       MOV     0xbc,#0x0
     79          
     80          
     81          	/*把函数hold_func拷贝到iram*/
     82          	void (*funpt)();
     83          	funpt = (void ( *)())0x0000;
     84          	u8 const   __code *otp_tbl;
     85          	u8 *ram_tbl;
     86          	u8 i;
     87          	otp_tbl = (u8 const __code *)((u16)soft_poweroff);
   \   00003C   78..         MOV     R0,#(soft_poweroff & 0xff)
   \   00003E   79..         MOV     R1,#((soft_poweroff >> 8) & 0xff)
     88          	ram_tbl = (u8 *)0x0000;
   \   000040   7A00         MOV     R2,#0x0
   \   000042   7B00         MOV     R3,#0x0
     89          	for(i = 0; i < 20; i++)
   \   000044   7C14         MOV     R4,#0x14
     90          	{
     91          		*ram_tbl = *otp_tbl;
   \                     ??soft_poweroff_enter_1:
   \   000046   8882         MOV     DPL,R0
   \   000048   8983         MOV     DPH,R1
   \   00004A   E4           CLR     A
   \   00004B   93           MOVC    A,@A+DPTR
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   F0           MOVX    @DPTR,A
     92          		ram_tbl++;
   \   000051   A3           INC     DPTR
   \   000052   AA82         MOV     R2,DPL
   \   000054   AB83         MOV     R3,DPH
     93          		otp_tbl++;
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A882         MOV     R0,DPL
   \   00005D   A983         MOV     R1,DPH
     94          	}
   \   00005F   1C           DEC     R4
   \   000060   EC           MOV     A,R4
   \   000061   70E3         JNZ     ??soft_poweroff_enter_1
     95          
     96          	CLKCON = (CLKCON & 0xfc) | BIT(0);  //sysclk select rc2m
   \   000063   74FC         MOV     A,#-0x4
   \   000065   55CB         ANL     A,0xcb
   \   000067   4401         ORL     A,#0x1
   \   000069   F5CB         MOV     0xcb,A
     97          	CLKCON1 = (CLKCON1 & 0xf3);         //sysclk no div
   \   00006B   53CCF3       ANL     0xcc,#0xf3
   \   00006E   E5CC         MOV     A,0xcc
     98          
     99          	(*funpt)();
   \   000070                ; Setup parameters for indirect call
   \   000070   120000       LCALL   0x0
    100          }
   \                     ??soft_poweroff_enter_0:
   \   000073   22           RET
    101          
    102          #pragma location="TASK_POWEROFF_SEG"

   \                                 In segment TASK_POWEROFF_SEG, align 1, keep-with-next
    103          void wko_init(void)
   \                     wko_init:
    104          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    105              u8 wkocon_val = irtc_read_cmd(WKO_RD);
   \   000000                ; Setup parameters for call to function irtc_read_cmd
   \   000000   79A1         MOV     R1,#-0x5f
   \   000002   12....       LCALL   irtc_read_cmd
   \   000005   E9           MOV     A,R1
   \   000006   FA           MOV     R2,A
    106              #if (SYS_CRY == CRY_RC)
    107                      CLKCON2 |= BIT(7);
   \   000007   43CD80       ORL     0xcd,#0x80
    108                      wkocon_val |= BIT(4) | BIT(3) | BIT(2);
    109                      wkocon_val &= ~BIT(6);
    110              #else
    111                      wkocon_val |= BIT(6) | BIT(4) | BIT(3) | BIT(2);
    112                          //bit6-FITEN:WKO 1ms filter enable
    113                          //bit4-WKOEN:WKO PIN enable
    114                          //bit3-WKOUTEN:WKO PIN output enable
    115                          //bit2-WKOINEN:WKO PIN input enable
    116              #endif
    117              
    118              irtc_write_cmd(WKO_WR,wkocon_val);
   \   00000A                ; Setup parameters for call to function irtc_write_cmd
   \   00000A   74BF         MOV     A,#-0x41
   \   00000C   5A           ANL     A,R2
   \   00000D   441C         ORL     A,#0x1c
   \   00000F   FA           MOV     R2,A
   \   000010   795B         MOV     R1,#0x5b
   \   000012   12....       LCALL   irtc_write_cmd
    119              
    120              #if SRAM_DEBUG
    121              	//【注意】在SRAM板上调试时，请使用电池供电，不要连接5V电源
    122              	irtc_write_cmd(VCL_WR,0x06);//使能HVD并把HVD级别设置为4.2v(防止连接5V电源时使用软关机把芯片烧掉)
   \   000015                ; Setup parameters for call to function irtc_write_cmd
   \   000015   7A06         MOV     R2,#0x6
   \   000017   79A2         MOV     R1,#-0x5e
   \   000019   12....       LCALL   irtc_write_cmd
    123              #endif
    124          
    125          }
   \   00001C   22           RET
    126          
    127          
    128          /* 
    129          void wko_init(void)
    130          {
    131          	u8 wkocon_val = irtc_read_cmd(WKO_RD);
    132          	wkocon_val |= BIT(6) | BIT(4) | BIT(3) | BIT(2);
    133          	//bit6-FITEN:WKO 1ms filter enable
    134          	//bit4-WKOEN:WKO PIN enable
    135          	//bit3-WKOUTEN:WKO PIN output enable
    136          	//bit2-WKOINEN:WKO PIN input enable
    137          	wkocon_val &= ~BIT(7);
    138          	//bit7-WKPIN_STA:wake up pin output 0,打开内部下拉电阻
    139          	irtc_write_cmd(WKO_WR,wkocon_val);
    140          
    141          #if SRAM_DEBUG
    142          	//【注意】在SRAM板上调试时，请使用电池供电，不要连接5V电源
    143          	irtc_write_cmd(VCL_WR,0x06);//使能HVD并把HVD级别设置为4.2v(防止连接5V电源时使用软关机把芯片烧掉)
    144          #endif
    145          }
    146            */
    147          
    148          
    149          #pragma location="TASK_POWEROFF_SEG"

   \                                 In segment TASK_POWEROFF_SEG, align 1, keep-with-next
    150          void soft_poweroff_init(void)
   \                     soft_poweroff_init:
    151          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
   \   000003   8003         SJMP    ??soft_poweroff_init_0
    152          	u8 poweron_cnt;
    153          
    154          	//printf("Pw:%d\n",poweroff_ctl.power_key_sta);
    155          	//poweroff_ctl.power_key_sta = 1;   //  强制开启电源   20170617
    156          	while(poweroff_ctl.power_key_sta == POWERKEY_INIT)     //等待确认power key的状态
    157          	{
    158          		WATCHDOG_CLR();
   \                     ??soft_poweroff_init_1:
   \   000005   43F720       ORL     0xf7,#0x20
    159          	}
   \                     ??soft_poweroff_init_0:
   \   000008   90....       MOV     DPTR,#poweroff_ctl
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   60F7         JZ      ??soft_poweroff_init_1
    160          #if DCIN_DET_EN
    161          	while((poweroff_ctl.dc_in_sta == DC_INIT)
    162          	        || (poweroff_ctl.dc_in_sta == DC_UNSTABLE))              //等待确认DC_IN充电线的状态
    163          	{
    164          		WATCHDOG_CLR();
    165          	}
    166          #endif
    167          
    168          #if POWERON_LONG_KEY
    169          	poweron_cnt = 250;    //100*5ms = 500ms,长按POWER键开机    长按1.25s开机 
    170          #else
    171          	poweron_cnt = 10;     //10*5ms = 50ms,短按POWER键开机
    172          #endif
    173          
    174          	uart_putc('A');
   \   00000E                ; Setup parameters for call to function uart_putc
   \   00000E   7941         MOV     R1,#0x41
   \   000010   12....       LCALL   uart_putc
    175          
    176          	for(u8 i = 0; i < poweron_cnt; i++)
   \   000013   7EFA         MOV     R6,#-0x6
    177          	{
    178          		//if((poweroff_ctl.power_key_sta == POWERKEY_DOWN)   //power key按下或DC IN
    179          		if(1   //power key按下或DC IN
    180          #if DCIN_DET_EN
    181          		        &&(poweroff_ctl.dc_in_sta == DC_OUT)
    182          #endif
    183          		  )         //充电线拔出状态
    184          		{
    185          			delay_5ms(1);
   \                     ??soft_poweroff_init_2:
   \   000015                ; Setup parameters for call to function delay_5ms
   \   000015   7901         MOV     R1,#0x1
   \   000017   12....       LCALL   delay_5ms
    186          			WATCHDOG_CLR();
   \   00001A   43F720       ORL     0xf7,#0x20
    187          			//uart_putc('<');
    188          		}
    189          		else
    190          		{
    191          			//printf("bat_sta: %d ",sys_ctl.bat_charger_sta);
    192          			if(sys_ctl.bat_charger_sta == 1)
    193          			{
    194          				uart_putc('a');
    195          				while(sys_ctl.bat_charger_sta == 1)     //等待确认power key的状态
    196          				{
    197          					//uart_putc('b');
    198          					WATCHDOG_CLR();
    199          					if((get_msg() == KL_POWER) || (get_msg() == KH_POWER))
    200          					{
    201          						WDTCON = 0x18;  //watchdog 2ms后reset
    202          						printf("charge_power_on\n");
    203          	                    while(1);
    204          					}
    205          				}
    206          			}
    207          			uart_putc('+');
    208          			poweroff_ctl.flag = 0;        //用于区分是从初始化中关机，还是从其它模式中关机
    209          			task_ctl.work_sta = TASK_POWEROFF;
    210          			task_poweroff();              //继续关机
    211          			break;
    212          		}
    213          	}
   \   00001D   1E           DEC     R6
   \   00001E   EE           MOV     A,R6
   \   00001F   70F4         JNZ     ??soft_poweroff_init_2
    214          
    215          	poweroff_ctl.flag = 1;                //用于区分是从初始化中关机，还是从其它模式中关机
   \   000021   7401         MOV     A,#0x1
   \   000023   90....       MOV     DPTR,#(poweroff_ctl + 2)
   \   000026   F0           MOVX    @DPTR,A
    216          
    217          	printf("power on...\n");
   \   000027                ; Setup parameters for call to function my_printf
   \   000027   7A..         MOV     R2,#(`?<Constant "power on...\\n">` & 0xff)
   \   000029   7B..         MOV     R3,#((`?<Constant "power on...\\n">` >> 8) & 0xff)
   \   00002B   12....       LCALL   my_printf
    218          	//showhello();	
    219          }
   \   00002E   D0E0         POP     A
   \   000030   FE           MOV     R6,A
   \   000031   22           RET
    220          #endif
    221          
    222          //任务事件
    223          #pragma location="TASK_POWEROFF_SEG"

   \                                 In segment TASK_POWEROFF_SEG, align 1, keep-with-next
    224          void task_poweroff_event(void)
   \                     task_poweroff_event:
    225          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    226          	WATCHDOG_CLR();
   \   000000   43F720       ORL     0xf7,#0x20
    227          
    228          	mem_event();
   \   000003                ; Setup parameters for call to function mem_event
   \   000003   12....       LCALL   mem_event
    229          
    230          	//printf("s_");
    231          	//delay_5ms(200);          //延时2s期间会输出低电平
    232          	//delay_5ms(200);
    233          	//delay_5ms(200);
    234          	
    235          
    236          #if SOFT_POWEROFF_EN
    237          	if(poweroff_ctl.power_key_sta == POWERKEY_UP)
   \   000006   90....       MOV     DPTR,#poweroff_ctl
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FA           MOV     R2,A
   \   00000B   7402         MOV     A,#0x2
   \   00000D   6A           XRL     A,R2
   \   00000E   7003         JNZ     ??task_poweroff_event_0
    238          	{
    239          		//printf("e_");
    240          		soft_poweroff_enter();
   \   000010                ; Setup parameters for call to function soft_poweroff_enter
   \   000010   12....       LCALL   soft_poweroff_enter
    241          	}
    242          #endif
    243          }
   \                     ??task_poweroff_event_0:
   \   000013   22           RET
    244          
    245          //任务消息处理
    246          #pragma location="TASK_POWEROFF_SEG"

   \                                 In segment TASK_POWEROFF_SEG, align 1, keep-with-next
    247          void task_poweroff_deal_msg(u8 msg)
   \                     task_poweroff_deal_msg:
    248          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    249          	
    250          	switch(msg)
   \   000000   E9           MOV     A,R1
   \   000001   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for task_poweroff_deal_msg>_0`:
   \   000004   AE           DB        174
   \   000005   01           DB        1
   \   000006   ....         DW        ??task_poweroff_deal_msg_0
   \   000008   ....         DW        ??task_poweroff_deal_msg_1
   \   00000A   ....         DW        ??task_poweroff_deal_msg_1
    251          	{
    252          	case KL_POWER:
    253          #if SOFT_POWEROFF_EN
    254          #if POWERON_LONG_KEY
    255          	case KL_SOFT_POWER:    //长按开机
    256          #else
    257          	case KU_SOFT_POWER:    //短按开机
    258          #endif
    259          #endif
    260                  printf("Again on\n");
   \                     ??task_poweroff_deal_msg_1:
   \   00000C                ; Setup parameters for call to function my_printf
   \   00000C   7A..         MOV     R2,#(`?<Constant "Again on\\n">` & 0xff)
   \   00000E   7B..         MOV     R3,#((`?<Constant "Again on\\n">` >> 8) & 0xff)
   \   000010   12....       LCALL   my_printf
    261          		task_ctl.work_sta = task_ctl.last_work;
   \   000013   85....       MOV     task_ctl,(task_ctl + 1)
    262          		break;
    263          	default:
    264          		break;
    265          	}
    266          	
    267          }
   \                     ??task_poweroff_deal_msg_0:
   \   000016   22           RET
    268          
    269          /*****************************************************************************
    270           * Module    : 关机任务入口
    271           *****************************************************************************/
    272          //任务初始化
    273          #pragma location="TASK_POWEROFF_SEG"

   \                                 In segment TASK_POWEROFF_SEG, align 1, keep-with-next
    274          void task_poweroff_enter(void)
   \                     task_poweroff_enter:
    275          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    276          	PCON0 |= BIT(2);
   \   000000   D2CA         SETB    0xc8.2
    277          #if (DISP_TYPE==DISP_LED)
    278          	ocx.led_sta = LED_STA_ON;
    279          #endif
    280          
    281          #if ALARM_WAKEUP_EN
    282          	u8 wkocon_val = irtc_read_cmd(WKO_RD);
    283          	wkocon_val &= ~BIT(7);
    284          	wkocon_val |= BIT(5);  //enable alarm output update wko output
    285          	irtc_write_cmd(WKO_WR, wkocon_val);
    286          #endif
    287          
    288          #if SOFT_POWEROFF_EN
    289          	if(poweroff_ctl.flag)
   \   000002   90....       MOV     DPTR,#(poweroff_ctl + 2)
   \   000005   E0           MOVX    A,@DPTR
   \   000006   600B         JZ      ??task_poweroff_enter_0
    290          	{
    291          #endif
    292          		showoff();
   \   000008                ; Setup parameters for call to function led_7p7s_disp_str
   \   000008   7A..         MOV     R2,#(`?<Constant "off">` & 0xff)
   \   00000A   7B..         MOV     R3,#((`?<Constant "off">` >> 8) & 0xff)
   \   00000C   12....       LCALL   led_7p7s_disp_str
    293                  //uart_putc('+');
    294          		//delay_5ms(100);   // 取消延时，缩短关机等待时间  20170726  //延时中可看出MUTE输出为高电平，查找关机ber声产生原因
    295          		//uart_putc('-');
    296          		WATCHDOG_CLR();
   \   00000F   43F720       ORL     0xf7,#0x20
   \   000012   22           RET
    297          		
    298          #if SOFT_POWEROFF_EN
    299          	}
    300          	else
    301          	{
    302          		disp_clear();
   \                     ??task_poweroff_enter_0:
   \   000013                ; Setup parameters for call to function led_7p7s_clear
   \   000013   12....       LCALL   led_7p7s_clear
    303          	}
    304          #endif
    305          //if(sys_ctl.user_power_down_flag == 1)//关机键按下，断电关机   //  重新把mute拉低，导致关机有ber声音  20170705   wq 
    306          //	SOFT_POWER_CTL_OFF();             
    307          
    308          }
   \   000016   22           RET
    309          
    310          //任务退出
    311          #pragma location="TASK_POWEROFF_SEG"

   \                                 In segment TASK_POWEROFF_SEG, align 1, keep-with-next
    312          void task_poweroff_exit(void)
   \                     task_poweroff_exit:
    313          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    314          }
   \   000000   22           RET
    315          
    316          //任务主流程
    317          #pragma location="TASK_POWEROFF_SEG"

   \                                 In segment TASK_POWEROFF_SEG, align 1, keep-with-next
    318          void task_poweroff(void)
   \                     task_poweroff:
    319          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    320          	printf("task_poweroff\n");
   \   000000                ; Setup parameters for call to function my_printf
   \   000000   7A..         MOV     R2,#(`?<Constant "task_poweroff\\n">` & 0xff)
   \   000002   7B..         MOV     R3,#((`?<Constant "task_poweroff\\n">` >> 8) & 0xff)
   \   000004   12....       LCALL   my_printf
    321          	task_poweroff_enter();
   \   000007                ; Setup parameters for call to function task_poweroff_enter
   \   000007   12....       LCALL   task_poweroff_enter
   \   00000A   800C         SJMP    ??task_poweroff_0
    322          	while(task_ctl.work_sta == TASK_POWEROFF)
    323          	{
    324          		task_poweroff_deal_msg(get_msg());
   \                     ??task_poweroff_1:
   \   00000C                ; Setup parameters for call to function task_poweroff_deal_msg
   \   00000C                ; Setup parameters for call to function get_msg
   \   00000C   12....       LCALL   get_msg
   \   00000F   12....       LCALL   task_poweroff_deal_msg
    325          		task_poweroff_display();
   \   000012                ; Setup parameters for call to function task_poweroff_display
   \   000012   12....       LCALL   task_poweroff_display
    326          		task_poweroff_event();
   \   000015                ; Setup parameters for call to function task_poweroff_event
   \   000015   12....       LCALL   task_poweroff_event
    327          	}
   \                     ??task_poweroff_0:
   \   000018   7409         MOV     A,#0x9
   \   00001A   65..         XRL     A,task_ctl
   \   00001C   60EE         JZ      ??task_poweroff_1
    328          	task_poweroff_exit();
    329          }
   \   00001E   22           RET

   \                                 In segment CODE_C, align 1
   \                     `?<Constant "soft_powerdown\\n">`:
   \   000000   736F6674     DB "soft_powerdown\012"
   \            5F706F77
   \            6572646F
   \            776E0A00

   \                                 In segment CODE_C, align 1
   \                     `?<Constant "power on...\\n">`:
   \   000000   706F7765     DB "power on...\012"
   \            72206F6E
   \            2E2E2E0A
   \            00      

   \                                 In segment CODE_C, align 1
   \                     `?<Constant "Again on\\n">`:
   \   000000   41676169     DB "Again on\012"
   \            6E206F6E
   \            0A00    

   \                                 In segment CODE_C, align 1
   \                     `?<Constant "off">`:
   \   000000   6F666600     DB "off"

   \                                 In segment CODE_C, align 1
   \                     `?<Constant "task_poweroff\\n">`:
   \   000000   7461736B     DB "task_poweroff\012"
   \            5F706F77
   \            65726F66
   \            660A00  

   \                                 In segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IE0
   \                     _A_IE0:
   \   000000                DS 1
    330          #endif
    331          
    332          

   Maximum stack usage in bytes:

     Function                    EXT_STACK PSTACK XSTACK
     --------                    --------- ------ ------
     soft_poweroff                      0      0      0
       -> irtc_write_cmd                0      0      0
       -> osc_delay                     0      0      0
     soft_poweroff_enter                1      0      0
       -> my_printf                     0      0      0
       -> irtc_write_cmd                0      0      0
       -> led_7p7s_init                 0      0      0
     soft_poweroff_init                 1      0      0
       -> uart_putc                     2      0      0
       -> delay_5ms                     2      0      0
       -> my_printf                     2      0      0
     task_poweroff                      0      0      0
       -> my_printf                     0      0      0
       -> task_poweroff_enter           0      0      0
       -> get_msg                       0      0      0
       -> task_poweroff_deal_msg        0      0      0
       -> task_poweroff_display         0      0      0
       -> task_poweroff_event           0      0      0
     task_poweroff_deal_msg             0      0      0
       -> my_printf                     0      0      0
     task_poweroff_enter                0      0      0
       -> led_7p7s_disp_str             0      0      0
       -> led_7p7s_clear                0      0      0
     task_poweroff_event                0      0      0
       -> mem_event                     0      0      0
       -> soft_poweroff_enter           0      0      0
     task_poweroff_exit                 0      0      0
     wko_init                           0      0      0
       -> irtc_read_cmd                 0      0      0
       -> irtc_write_cmd                0      0      0
       -> irtc_write_cmd                0      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     P2                                1
     P2DIR                             1
     PCON0                             1
     CLKCON                            1
     CLKCON1                           1
     CLKCON2                           1
     WDTCON                            1
     poweroff_ctl                      3
     ??soft_poweroff_0                19
     soft_poweroff_enter             116
     wko_init                         29
     soft_poweroff_init               50
     task_poweroff_event              20
     task_poweroff_deal_msg           23
     task_poweroff_enter              23
     task_poweroff_exit                1
     task_poweroff                    31
     ?<Constant "soft_powerdown\n">   16
     ?<Constant "power on...\n">      13
     ?<Constant "Again on\n">         10
     ?<Constant "off">                 4
     ?<Constant "task_poweroff\n">    15
     _A_IE0                            1

 
  58 bytes in segment CODE_C
   8 bytes in segment SFR_AN
 312 bytes in segment TASK_POWEROFF_SEG
   3 bytes in segment XDATA_Z
 
 370 bytes of CODE  memory
   0 bytes of DATA  memory (+ 8 bytes shared)
   3 bytes of XDATA memory

Errors: none
Warnings: none
