##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   27/Jun/2018  22:48:35 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  near                                              #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  user/user_fat.c                                   #
#    Command line       =  -f option_c51.cfg (-ICOMMON\ -IINC\ -Iconfig\     #
#                          -Iapi\ -Ifm\ -Ifat\ -Idisplay\                    #
#                          -Idisplay\theme_default\ -Idisplay\led\           #
#                          -Idisplay\lcd\ -Itask\ -Iuser\ -Imem\ -Imodule\   #
#                          -Ikey\ -Istartmusic\ -Ispi\ -e -z9 --core=plain   #
#                          --dptr=16,1 --data_model=large --code_model=near  #
#                          --calling_convention=ext_stack_reentrant          #
#                          --place_constants=code --nr_virtual_regs 20       #
#                          --extended_stack) -DAX207X_TAG --debug -lC        #
#                          DebugBC/List -o DebugBC/Obj/user_fat.r51          #
#                          user/user_fat.c                                   #
#    List file          =  DebugBC/List/user_fat.lst                         #
#    Object file        =  DebugBC/Obj/user_fat.r51                          #
#                                                                            #
#                                                                            #
##############################################################################

R:\18BC073A_宇泰_AX1071_xxxxxxxx_20180627\app\user\user_fat.c
      1          /*****************************************************************************
      2           * Module    : user
      3           * File      : user_fat.c
      4           * Author    : Hanny
      5           * Email     : coldney@yahoo.com.cn
      6           * Function  : 文件系统接口，可以增加读接口的加密算法等
      7           *****************************************************************************/
      8          #include "include.h"
      9          #define XorValue	0x63		// 使用此值进行XOR运算
     10          
     11          //音乐文件读接口

   \                                 In segment NEAR_CODE, align 1, keep-with-next
     12          bool music_decoder_read(void *buf)
   \                     music_decoder_read:
     13          {
   \   000000   7404         MOV     A,#0x4
   \   000002   12....       LCALL   ?FUNC_ENTER_SP
   \   000005                ; Saved register size: 7
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     14          	u8 fr_sta;
     15          
     16          	fr_sta = f_read(buf);
   \   000009                ; Setup parameters for call to function f_read
   \   000009   12....       LCALL   f_read
   \   00000C   E9           MOV     A,R1
   \   00000D   FA           MOV     R2,A
     17          #if MPX_SUPPORT
     18          	if(f_Encrypt)
   \   00000E   90....       MOV     DPTR,#f_Encrypt
   \   000011   E0           MOVX    A,@DPTR
   \   000012   601B         JZ      ??music_decoder_read_0
     19          	{
     20          		u8 *buffer;
     21          		register u16 i;
     22          		i = 0;
     23          		buffer = (u8 *) buf;
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   7800         MOV     R0,#0x0
   \   00001A   7902         MOV     R1,#0x2
     24          		do
     25          		{
     26          			*buffer = *buffer ^ XorValue;
   \                     ??music_decoder_read_1:
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6463         XRL     A,#0x63
   \   00001F   F0           MOVX    @DPTR,A
     27          			buffer++;
   \   000020   A3           INC     DPTR
     28          			i++;
     29          		} while(i < 512);
   \   000021   E8           MOV     A,R0
   \   000022   24FF         ADD     A,#-0x1
   \   000024   18           DEC     R0
   \   000025   E9           MOV     A,R1
   \   000026   34FF         ADDC    A,#-0x1
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   7001         JNZ     ??music_decoder_read_2
   \   00002C   E9           MOV     A,R1
   \                     ??music_decoder_read_2:
   \   00002D   70ED         JNZ     ??music_decoder_read_1
     30          	}
     31          #endif
     32          	if(FR_OK != fr_sta)
   \                     ??music_decoder_read_0:
   \   00002F   EA           MOV     A,R2
   \   000030   6029         JZ      ??music_decoder_read_3
     33              {
     34          #if WAV_SUPPORT
     35                  if((FR_RW_ERROR == fr_sta) && (TYPE_WAV == msc_ctl.type))
     36                  {
     37                      IE_SINT = 0;
     38                      msc_ctl.status = STATUS_PLAY_STOPPING;
     39                  }
     40          #endif
     41          #if REPEAT_AS_ONE
     42                  if((FR_END_FILE == fr_sta))
     43                  {
     44                      m_f_lseek(F_SEEK_ORG, 2);
     45                      //f_read(buf);
     46                      //printf("567");
     47                      return true;
     48                  }
     49                  else
     50                      return false;
     51          #else
     52                  if( (sys_ctl.mode_play == ITEM_LOOP_SINGLE) ||
     53                      (u_msc.music_total == 1))
   \   000032   90....       MOV     DPTR,#sys_ctl
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6402         XRL     A,#0x2
   \   000038   600C         JZ      ??music_decoder_read_4
   \   00003A   90....       MOV     DPTR,#(u_msc + 4)
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6401         XRL     A,#0x1
   \   000040   7002         JNZ     ??music_decoder_read_5
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \                     ??music_decoder_read_5:
   \   000044   701B         JNZ     ??music_decoder_read_6
     54                  {
     55                      m_f_lseek(F_SEEK_ORG, 2);
   \                     ??music_decoder_read_4:
   \   000046                ; Setup parameters for call to function m_f_lseek
   \   000046   90....       MOV     DPTR,#__Constant_2
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?L_MOV_C
   \   00004E   AA..         MOV     R2,?V0 + 0
   \   000050   AB..         MOV     R3,?V0 + 1
   \   000052   AC..         MOV     R4,?V0 + 2
   \   000054   AD..         MOV     R5,?V0 + 3
   \   000056   7900         MOV     R1,#0x0
   \   000058   12....       LCALL   m_f_lseek
     56                      //f_read(buf);
     57                      //printf("567");
     58                      return true;
     59                  }
     60                  else
     61                  {
     62          		return false;
     63                  }
     64          #endif
     65          
     66              }
     67              return true;
   \                     ??music_decoder_read_3:
   \   00005B   D3           SETB    C
   \                     ??music_decoder_read_7:
   \   00005C   7F04         MOV     R7,#0x4
   \   00005E   02....       LJMP    ?FUNC_LEAVE_SP
   \                     ??music_decoder_read_6:
   \   000061   C3           CLR     C
   \   000062   80F8         SJMP    ??music_decoder_read_7
     68          }
     69          
     70          //音乐文件读接口

   \                                 In segment NEAR_CODE, align 1, keep-with-next
     71          bool decoder_read(void *buf)
   \                     decoder_read:
     72          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     73          //	printf("buf = %04x\n",buf);
     74          #if PLAY_STARTMUSIC
     75          	if(startmusic_ctl.flag)
     76          	{
     77          		return startmusic_read(buf);
     78          	}
     79          	else
     80          #endif
     81          
     82          #if TASK_FLASH_EN
     83          		if(u_spi.spi_music_flag)
   \   000000   90....       MOV     DPTR,#u_spi
   \   000003   E0           MOVX    A,@DPTR
   \   000004   6004         JZ      ??decoder_read_0
     84          		{
     85          			return spi_mp3flash_read(buf);
   \   000006                ; Setup parameters for call to function spi_mp3flash_read
   \   000006   12....       LCALL   spi_mp3flash_read
   \   000009   22           RET
     86          		}
     87          		else
     88          #endif
     89          		{
     90          			return music_decoder_read(buf);
   \                     ??decoder_read_0:
   \   00000A                ; Setup parameters for call to function music_decoder_read
   \   00000A   12....       LCALL   music_decoder_read
   \   00000D   22           RET
     91          		}
     92          }
     93          
     94          //音乐文件Seek接口

   \                                 In segment NEAR_CODE, align 1, keep-with-next
     95          bool decoder_seek(u8 mode, u32 offset)
   \                     decoder_seek:
     96          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004   C0..         PUSH    ?V0 + 2
   \   000006   C0..         PUSH    ?V0 + 3
   \   000008                ; Saved register size: 4
   \   000008                ; Auto size: 0
     97          #if PLAY_STARTMUSIC
     98          	if(startmusic_ctl.flag)
     99          	{
    100          		return startmusic_seek();
    101          	}
    102          	else
    103          #endif
    104          
    105          #if TASK_FLASH_EN
    106          		if(u_spi.spi_music_flag)
   \   000008   90....       MOV     DPTR,#u_spi
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6005         JZ      ??decoder_seek_0
    107          		{
    108          			return spi_mp3flash_seek(mode, offset);
   \   00000E                ; Setup parameters for call to function spi_mp3flash_seek
   \   00000E   12....       LCALL   spi_mp3flash_seek
   \   000011   800E         SJMP    ??decoder_seek_1
    109          		}
    110          		else
    111          #endif
    112          		{
    113          			return m_f_lseek((SEEK_MODE)mode, offset);
   \                     ??decoder_seek_0:
   \   000013                ; Setup parameters for call to function m_f_lseek
   \   000013   12....       LCALL   m_f_lseek
   \   000016   E9           MOV     A,R1
   \   000017   6004         JZ      ??decoder_seek_2
   \   000019   D2F0         SETB    B.0
   \   00001B   8002         SJMP    ??decoder_seek_3
   \                     ??decoder_seek_2:
   \   00001D   C2F0         CLR     B.0
   \                     ??decoder_seek_3:
   \   00001F   A2F0         MOV     C,B.0
   \                     ??decoder_seek_1:
   \   000021   D0..         POP     ?V0 + 3
   \   000023   D0..         POP     ?V0 + 2
   \   000025   D0..         POP     ?V0 + 1
   \   000027   D0..         POP     ?V0 + 0
   \   000029   22           RET
    114          		}
    115          }
    116          
    117          
    118          #pragma location="FS_SCAN_SEG"

   \                                 In segment FS_SCAN_SEG, align 1, keep-with-next
    119          FRESULT fs_scan_files(void)
   \                     fs_scan_files:
    120          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    121          #if FS_SCAN_SPEED_EN
    122          	return fs_scan_files_speed();
    123          #else
    124          	return fs_scan_files_no_speed();
   \   000000                ; Setup parameters for call to function fs_scan_files_no_speed
   \   000000   12....       LCALL   fs_scan_files_no_speed
   \   000003   22           RET
    125          #endif
    126          }

   \                                 In segment CODE_C, align 1
   \                     __Constant_2:
   \   000000   02000000     DD 2
    127          
    128          

   Maximum stack usage in bytes:

     Function                    EXT_STACK PSTACK XSTACK
     --------                    --------- ------ ------
     decoder_read                       0      0      0
       -> spi_mp3flash_read             0      0      0
       -> music_decoder_read            0      0      0
     decoder_seek                       4      0      0
       -> spi_mp3flash_seek             8      0      0
       -> m_f_lseek                     8      0      0
     fs_scan_files                      0      0      0
       -> fs_scan_files_no_speed        0      0      0
     music_decoder_read                 7      0      0
       -> f_read                       14      0      0
       -> m_f_lseek                    14      0      0


   Segment part sizes:

     Function/Label     Bytes
     --------------     -----
     music_decoder_read  100
     decoder_read         14
     decoder_seek         42
     fs_scan_files         4
     __Constant_2          4

 
   4 bytes in segment CODE_C
   4 bytes in segment FS_SCAN_SEG
 156 bytes in segment NEAR_CODE
 
 160 bytes of CODE memory (+ 4 bytes shared)

Errors: none
Warnings: none
