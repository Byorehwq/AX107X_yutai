##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   27/Jun/2018  22:48:35 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  near                                              #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  task/task_idle.c                                  #
#    Command line       =  -f option_c51.cfg (-ICOMMON\ -IINC\ -Iconfig\     #
#                          -Iapi\ -Ifm\ -Ifat\ -Idisplay\                    #
#                          -Idisplay\theme_default\ -Idisplay\led\           #
#                          -Idisplay\lcd\ -Itask\ -Iuser\ -Imem\ -Imodule\   #
#                          -Ikey\ -Istartmusic\ -Ispi\ -e -z9 --core=plain   #
#                          --dptr=16,1 --data_model=large --code_model=near  #
#                          --calling_convention=ext_stack_reentrant          #
#                          --place_constants=code --nr_virtual_regs 20       #
#                          --extended_stack) -DAX207X_TAG --debug -lC        #
#                          DebugBC/List -o DebugBC/Obj/task_idle.r51         #
#                          task/task_idle.c                                  #
#    List file          =  DebugBC/List/task_idle.lst                        #
#    Object file        =  DebugBC/Obj/task_idle.r51                         #
#                                                                            #
#                                                                            #
##############################################################################

R:\18BC073A_宇泰_AX1071_xxxxxxxx_20180627\app\task\task_idle.c
      1          /*****************************************************************************
      2           * Module    : Task
      3           * File      : task_idle.c
      4           * Author    : Hanny
      5           * Email     : coldney@yahoo.com.cn
      6           * Function  : 空闲任务
      7           *****************************************************************************/
      8          #include "include.h"
      9          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     10          u8 count_led_off;   //15min led off
   \                     count_led_off:
   \   000000                DS 1
     11          
     12          
     13          #if TASK_IDLE_EN
     14          
     15          void task_idle_display(void);
     16          
     17          //任务初始化
     18          #pragma location="TASK_IDLE_SEG"
     19          static void task_idle_enter(void)
     20          {
     21          	count_led_off = 0;
     22          #if (DISP_TYPE==DISP_LED)
     23          	ocx.led_sta = LED_STA_ON;
     24          #endif
     25          
     26          #if KEY_VOICE_EN
     27          	AMUX_AIN_EN();
     28          	mute_disable();
     29          #endif
     30          }
     31          
     32          //任务退出
     33          #pragma location="TASK_IDLE_SEG"
     34          static void task_idle_exit(void)
     35          {
     36          }
     37          
     38          //任务消息处理
     39          #pragma location="TASK_IDLE_SEG"
     40          static void task_idle_deal_msg(u8 msg)
     41          {
     42          	if(count_led_off == 15)   //2:测试模式   15:产品模式
     43          	{		
     44          		disp.led1 = 0;
     45          		disp.led2 = 0;
     46          		disp.led3 = 0;
     47          
     48          		task_ctl.work_sta = TASK_POWEROFF;
     49          		printf("led_off\n");
     50          		return;
     51          	}
     52          	switch(msg)
     53          	{
     54          	/*	
     55          	case KU_VOL_UP:
     56          	case KH_VOL_UP:
     57          	case KU_VOL_DOWN:
     58          	case KH_VOL_DOWN:
     59          		break;
     60          	*/
     61          
     62          	case T_KEY_NUM_0:
     63          	case T_KEY_NUM_1:
     64          	case T_KEY_NUM_2:
     65          	case T_KEY_NUM_3:
     66          	case T_KEY_NUM_4:
     67          	case T_KEY_NUM_5:
     68          		printf("Again\n");
     69          		Timer1_flag = false;
     70          		count_1min = 0;
     71          		task_ctl.work_sta = TASK_FLASH;
     72          		break;
     73          
     74              //关机
     75          #if TASK_POWEROFF_EN
     76          	case KL_POWER:
     77          	case KLU_POWER:
     78          		task_ctl.work_sta = TASK_POWEROFF;
     79          		sys_ctl.user_power_down_flag = 1;
     80          		break;
     81          #endif
     82          
     83          	default:
     84          		deal_msg(msg);
     85          		break;
     86          	}
     87          }
     88          
     89          //任务主流程
     90          #pragma location="TASK_IDLE_SEG"

   \                                 In segment TASK_IDLE_SEG, align 1, keep-with-next
     91          void task_idle(void)
   \                     task_idle:
     92          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     93          	printf("task_idle\n");
   \   000000                ; Setup parameters for call to function my_printf
   \   000000   7A..         MOV     R2,#(`?<Constant "task_idle\\n">` & 0xff)
   \   000002   7B..         MOV     R3,#((`?<Constant "task_idle\\n">` >> 8) & 0xff)
   \   000004   12....       LCALL   my_printf
     94          	task_idle_enter();
   \   000007   E4           CLR     A
   \   000008   90....       MOV     DPTR,#count_led_off
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   8006         SJMP    ??task_idle_0
     95          	while(task_ctl.work_sta == TASK_IDLE)
     96          	{
   \                     ??task_idle_1:
   \   00000E                ; Setup parameters for call to function deal_msg
   \   00000E   12....       LCALL   deal_msg
     97          		comm_event(1);
     98          		task_idle_deal_msg(get_msg());
     99          		task_idle_display();
   \                     ??task_idle_2:
   \   000011                ; Setup parameters for call to function task_idle_display
   \   000011   12....       LCALL   task_idle_display
   \                     ??task_idle_0:
   \   000014   7408         MOV     A,#0x8
   \   000016   65..         XRL     A,task_ctl
   \   000018   7057         JNZ     ??task_idle_3
   \   00001A                ; Setup parameters for call to function comm_event
   \   00001A   7901         MOV     R1,#0x1
   \   00001C   12....       LCALL   comm_event
   \   00001F                ; Setup parameters for call to function get_msg
   \   00001F   12....       LCALL   get_msg
   \   000022   90....       MOV     DPTR,#count_led_off
   \   000025   E0           MOVX    A,@DPTR
   \   000026   640F         XRL     A,#0xf
   \   000028   7015         JNZ     ??task_idle_4
   \   00002A   75..00       MOV     (disp + 1),#0x0
   \   00002D   75..00       MOV     (disp + 2),#0x0
   \   000030   75..00       MOV     (disp + 3),#0x0
   \   000033   75..09       MOV     task_ctl,#0x9
   \   000036                ; Setup parameters for call to function my_printf
   \   000036   7A..         MOV     R2,#(`?<Constant "led_off\\n">` & 0xff)
   \   000038   7B..         MOV     R3,#((`?<Constant "led_off\\n">` >> 8) & 0xff)
   \   00003A   12....       LCALL   my_printf
   \   00003D   80D2         SJMP    ??task_idle_2
   \                     ??task_idle_4:
   \   00003F   E9           MOV     A,R1
   \   000040   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for task_idle>_0`:
   \   000043   01           DB        1
   \   000044   20           DB        32
   \   000045   25           DB        37
   \   000046   ....         DW        ??task_idle_5
   \   000048   02           DB        2
   \   000049   AF           DB        175
   \   00004A   ....         DW        ??task_idle_6
   \   00004C   CF           DB        207
   \   00004D   ....         DW        ??task_idle_6
   \   00004F   ....         DW        ??task_idle_1
   \                     ??task_idle_5:
   \   000051                ; Setup parameters for call to function my_printf
   \   000051   7A..         MOV     R2,#(`?<Constant "Again\\n">` & 0xff)
   \   000053   7B..         MOV     R3,#((`?<Constant "Again\\n">` >> 8) & 0xff)
   \   000055   12....       LCALL   my_printf
   \   000058   E4           CLR     A
   \   000059   90....       MOV     DPTR,#Timer1_flag
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   90....       MOV     DPTR,#count_1min
   \   000060   F0           MOVX    @DPTR,A
   \   000061   75..06       MOV     task_ctl,#0x6
   \   000064   80AB         SJMP    ??task_idle_2
   \                     ??task_idle_6:
   \   000066   75..09       MOV     task_ctl,#0x9
   \   000069   7401         MOV     A,#0x1
   \   00006B   90....       MOV     DPTR,#(sys_ctl + 11)
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   80A0         SJMP    ??task_idle_2
    100          	}
    101          	task_idle_exit();
    102          }
   \                     ??task_idle_3:
   \   000071   22           RET

   \                                 In segment CODE_C, align 1
   \                     `?<Constant "led_off\\n">`:
   \   000000   6C65645F     DB "led_off\012"
   \            6F66660A
   \            00      

   \                                 In segment CODE_C, align 1
   \                     `?<Constant "Again\\n">`:
   \   000000   41676169     DB "Again\012"
   \            6E0A00  

   \                                 In segment CODE_C, align 1
   \                     `?<Constant "task_idle\\n">`:
   \   000000   7461736B     DB "task_idle\012"
   \            5F69646C
   \            650A00  
    103          
    104          #endif

   Maximum stack usage in bytes:

     Function               EXT_STACK PSTACK XSTACK
     --------               --------- ------ ------
     task_idle                     0      0      0
       -> my_printf                0      0      0
       -> deal_msg                 0      0      0
       -> task_idle_display        0      0      0
       -> comm_event               0      0      0
       -> get_msg                  0      0      0
       -> my_printf                0      0      0
       -> my_printf                0      0      0


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     count_led_off                1
     task_idle                  114
     ?<Constant "led_off\n">      9
     ?<Constant "Again\n">        7
     ?<Constant "task_idle\n">   11

 
  27 bytes in segment CODE_C
 114 bytes in segment TASK_IDLE_SEG
   1 byte  in segment XDATA_Z
 
 141 bytes of CODE  memory
   1 byte  of XDATA memory

Errors: none
Warnings: none
